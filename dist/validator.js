/*! For license information please see validator.js.LICENSE.txt */
(()=>{var t={8162:(t,e,r)=>{"use strict";var n=r(9509).Buffer;t.exports=function(t){if(t.length>=255)throw new TypeError("Alphabet too long");for(var e=new Uint8Array(256),r=0;r<e.length;r++)e[r]=255;for(var i=0;i<t.length;i++){var o=t.charAt(i),s=o.charCodeAt(0);if(255!==e[s])throw new TypeError(o+" is ambiguous");e[s]=i}var a=t.length,u=t.charAt(0),f=Math.log(a)/Math.log(256),h=Math.log(256)/Math.log(a);function c(t){if("string"!=typeof t)throw new TypeError("Expected String");if(0===t.length)return n.alloc(0);for(var r=0,i=0,o=0;t[r]===u;)i++,r++;for(var s=(t.length-r)*f+1>>>0,h=new Uint8Array(s);t[r];){var c=e[t.charCodeAt(r)];if(255===c)return;for(var l=0,p=s-1;(0!==c||l<o)&&-1!==p;p--,l++)c+=a*h[p]>>>0,h[p]=c%256>>>0,c=c/256>>>0;if(0!==c)throw new Error("Non-zero carry");o=l,r++}for(var d=s-o;d!==s&&0===h[d];)d++;var y=n.allocUnsafe(i+(s-d));y.fill(0,0,i);for(var g=i;d!==s;)y[g++]=h[d++];return y}return{encode:function(e){if((Array.isArray(e)||e instanceof Uint8Array)&&(e=n.from(e)),!n.isBuffer(e))throw new TypeError("Expected Buffer");if(0===e.length)return"";for(var r=0,i=0,o=0,s=e.length;o!==s&&0===e[o];)o++,r++;for(var f=(s-o)*h+1>>>0,c=new Uint8Array(f);o!==s;){for(var l=e[o],p=0,d=f-1;(0!==l||p<i)&&-1!==d;d--,p++)l+=256*c[d]>>>0,c[d]=l%a>>>0,l=l/a>>>0;if(0!==l)throw new Error("Non-zero carry");i=p,o++}for(var y=f-i;y!==f&&0===c[y];)y++;for(var g=u.repeat(r);y<f;++y)g+=t.charAt(c[y]);return g},decodeUnsafe:c,decode:function(t){var e=c(t);if(e)return e;throw new Error("Non-base"+a+" character")}}}},9742:(t,e)=>{"use strict";e.byteLength=function(t){var e=u(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,o=u(t),s=o[0],a=o[1],f=new i(function(t,e,r){return 3*(e+r)/4-r}(0,s,a)),h=0,c=a>0?s-4:s;for(r=0;r<c;r+=4)e=n[t.charCodeAt(r)]<<18|n[t.charCodeAt(r+1)]<<12|n[t.charCodeAt(r+2)]<<6|n[t.charCodeAt(r+3)],f[h++]=e>>16&255,f[h++]=e>>8&255,f[h++]=255&e;return 2===a&&(e=n[t.charCodeAt(r)]<<2|n[t.charCodeAt(r+1)]>>4,f[h++]=255&e),1===a&&(e=n[t.charCodeAt(r)]<<10|n[t.charCodeAt(r+1)]<<4|n[t.charCodeAt(r+2)]>>2,f[h++]=e>>8&255,f[h++]=255&e),f},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=16383,a=0,u=n-i;a<u;a+=s)o.push(f(t,a,a+s>u?u:a+s));return 1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"=")),o.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,a=o.length;s<a;++s)r[s]=o[s],n[o.charCodeAt(s)]=s;function u(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function f(t,e,n){for(var i,o,s=[],a=e;a<n;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},299:(t,e,r)=>{var n,i=r(8764).Buffer,o=1e9,s=20,a=4,u=-7,f=21,h=-o,c=o,l=!0,p=parseInt,d=m.prototype,y="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_",g=0,v=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,b=String.prototype.trim||function(){return this.replace(/^\s+|\s+$/g,"")},w=m(1);function m(t,e){var r,i,o,u,f,p,d=this;if(!(d instanceof m))return new m(t,e);if(t instanceof m){if(g=0,e===r)return d.s=t.s,d.e=t.e,void(d.c=(t=t.c)?t.slice():t);t+=""}if("string"!=typeof t&&(t=(o="number"==typeof t||"[object Number]"==Object.prototype.toString.call(t))&&0===t&&1/t<0?"-0":t+""),p=t,e===r&&v.test(t))d.s="-"==t.charAt(0)?(t=t.slice(1),-1):1;else{if(10==e)return U(t,s,a);if(t=b.call(t).replace(/^\+(?!-)/,""),d.s="-"==t.charAt(0)?(t=t.replace(/^-(?!-)/,""),-1):1,null!=e?e!=(0|e)&&l||(n=!(e>=2&&e<65))?(A(e,2),f=v.test(t)):(u="["+y.slice(0,e|=0)+"]+",t=t.replace(/\.$/,"").replace(/^\./,"0."),(f=new RegExp("^"+u+"(?:\\."+u+")?$",e<37?"i":"").test(t))?(o&&(t.replace(/^0\.0*|\./,"").length>15&&A(p,0),o=!o),t=_(t,10,e,d.s)):"Infinity"!=t&&"NaN"!=t&&(A(p,1,e),t="NaN")):f=v.test(t),!f)return d.c=d.e=null,"Infinity"!=t&&("NaN"!=t&&A(p,3),d.s=null),void(g=0)}for((r=t.indexOf("."))>-1&&(t=t.replace(".","")),(i=t.search(/e/i))>0?(r<0&&(r=i),r+=+t.slice(i+1),t=t.substring(0,i)):r<0&&(r=t.length),i=0;"0"==t.charAt(i);i++);if(e=t.length,o&&e>15&&t.slice(i).length>15&&A(p,0),g=0,(r-=i+1)>c)d.c=d.e=null;else if(i==e||r<h)d.c=[d.e=0];else{for(;"0"==t.charAt(--e););for(d.e=r,d.c=[],r=0;i<=e;d.c[r++]=+t.charAt(i++));}}function A(t,e,r,i,o,s){if(l){var a,u=["new BigNumber","cmp","div","eq","gt","gte","lt","lte","minus","mod","plus","times","toFr"][g?g<0?-g:g:1/g<0?1:0]+"()",f=n?" out of range":" not a"+(o?" non-zero":"n")+" integer";throw f=([u+" number type has more than 15 significant digits",u+" not a base "+r+" number",u+" base"+f,u+" not a number"][e]||r+"() "+e+(s?" not a boolean or binary digit":f+(i?" or not ["+(n?" negative, positive":" integer, integer")+" ]":"")))+": "+t,n=g=0,(a=new Error(f)).name="BigNumber Error",a}}function _(t,e,r,n){var i,o,s,a,u,f;function h(t,n){var i,o,s=0,a=t.length,u=[0];for(n=n||r;s<a;s++){for(o=u.length,i=0;i<o;u[i]*=n,i++);for(u[0]+=y.indexOf(t.charAt(s)),i=0;i<u.length;i++)u[i]>e-1&&(null==u[i+1]&&(u[i+1]=0),u[i+1]+=u[i]/e^0,u[i]%=e)}return u.reverse()}function c(t){for(var e=0,r=t.length,n="";e<r;n+=y.charAt(t[e++]));return n}if(r<37&&(t=t.toLowerCase()),(i=t.indexOf("."))>-1)if(i=t.length-i-1,o=h(new m(r).pow(i).toF(),10),s=h((a=t.split("."))[1]),a=h(a[0]),u=(f=E(s,o,s.length-o.length,n,e,1&a[a.length-1])).c,i=f.e){for(;++i;u.unshift(0));t=c(a)+"."+c(u)}else u[0]?a[i=a.length-1]<e-1?(++a[i],t=c(a)):t=new m(c(a),e).plus(w).toS(e):t=c(a);else t=c(h(t));return t}function E(t,e,r,n,i,o){var a,u,f,l,p,d=e.slice(),y=a=e.length,g=t.length,v=t.slice(0,a),b=v.length,A=new m(w),_=A.c=[],E=0,B=s+(A.e=r)+1;for(A.s=n,n=B<0?0:B;b++<a;v.push(0));d.unshift(0);do{for(f=0;f<i;f++){if(a!=(b=v.length))l=a>b?1:-1;else for(p=-1,l=0;++p<a;)if(e[p]!=v[p]){l=e[p]>v[p]?1:-1;break}if(!(l<0))break;for(u=b==a?e:d;b;){if(v[--b]<u[b]){for(p=b;p&&!v[--p];v[p]=i-1);--v[p],v[b]+=i}v[b]-=u[b]}for(;!v[0];v.shift());}_[E++]=l?f:++f,v[0]&&l?v[b]=t[y]||0:v=[t[y]]}while((y++<g||null!=v[0])&&n--);return _[0]||1==E||(--A.e,_.shift()),E>B&&x(A,s,i,o,null!=v[0]),A.e>c?A.c=A.e=null:A.e<h&&(A.c=[A.e=0]),A}function B(t,e,r){var n=e-(t=new m(t)).e,i=t.c;if(!i)return t.toS();for(i.length>++e&&x(t,n,10),n=0==i[0]?n+1:r?e:t.e+n+1;i.length<n;i.push(0));return n=t.e,1==r||2==r&&(--e<n||n<=u)?(t.s<0&&i[0]?"-":"")+(i.length>1?(i.splice(1,0,"."),i.join("")):i[0])+(n<0?"e":"e+")+n:t.toS()}function x(t,e,r,n,i){var o=t.c,s=t.s<0,u=r/2,f=t.e+e+1,h=o[f],c=i||f<0||null!=o[f+1];if(i=a<4?(null!=h||c)&&(0==a||2==a&&!s||3==a&&s):h>u||h==u&&(4==a||c||6==a&&(1&o[f-1]||!e&&n)||7==a&&!s||8==a&&s),f<1||!o[0])return o.length=0,o.push(0),i?(o[0]=1,t.e=-e):t.e=0,t;if(o.length=f--,i)for(--r;++o[f]>r;)o[f]=0,f--||(++t.e,o.unshift(1));for(f=o.length;!o[--f];o.pop());return t}function U(t,e,r){var n=a;return a=r,(t=new m(t)).c&&x(t,e,10),a=n,t}m.ROUND_UP=0,m.ROUND_DOWN=1,m.ROUND_CEIL=2,m.ROUND_FLOOR=3,m.ROUND_HALF_UP=4,m.ROUND_HALF_DOWN=5,m.ROUND_HALF_EVEN=6,m.ROUND_HALF_CEIL=7,m.ROUND_HALF_FLOOR=8,m.fromBuffer=function(t,e){e||(e={});var r={1:"big","-1":"little"}[e.endian]||e.endian||"big",n="auto"===e.size?Math.ceil(t.length):e.size||1;if(t.length%n!=0)throw new RangeError("Buffer length ("+t.length+") must be a multiple of size ("+n+")");for(var i=[],o=0;o<t.length;o+=n){for(var s=[],a=0;a<n;a++)s.push(t[o+("big"===r?a:n-a-1)]);i.push(s.map((function(t){return(t<16?"0":"")+t.toString(16)})).join(""))}return m(i.join(""),16)},m.config=function(){var t,e,r=0,i={},d=arguments,y=d[0],v="config",b=function(t,e,r){return!((n=t<e||t>r)||p(t)!=t&&0!==t)},w=y&&"object"==typeof y?function(){if(y.hasOwnProperty(e))return null!=(t=y[e])}:function(){if(d.length>r)return null!=(t=d[r++])};return w(e="DECIMAL_PLACES")&&(b(t,0,o)?s=0|t:A(t,e,v)),i[e]=s,w(e="ROUNDING_MODE")&&(b(t,0,8)?a=0|t:A(t,e,v)),i[e]=a,w(e="EXPONENTIAL_AT")&&(b(t,-o,o)?u=-(f=~~(t<0?-t:+t)):!n&&t&&b(t[0],-o,0)&&b(t[1],0,o)?(u=~~t[0],f=~~t[1]):A(t,e,v,1)),i[e]=[u,f],w(e="RANGE")&&(b(t,-o,o)&&~~t?h=-(c=~~(t<0?-t:+t)):!n&&t&&b(t[0],-o,-1)&&b(t[1],1,o)?(h=~~t[0],c=~~t[1]):A(t,e,v,1,1)),i[e]=[h,c],w(e="ERRORS")&&(t===!!t||1===t||0===t?(n=g=0,p=(l=!!t)?parseInt:parseFloat):A(t,e,v,0,0,1)),i[e]=l,i},d.abs=d.absoluteValue=function(){var t=new m(this);return t.s<0&&(t.s=1),t},d.bitLength=function(){return this.toString(2).length},d.ceil=function(){return U(this,0,2)},d.comparedTo=d.cmp=function(t,e){var r,n=this,i=n.c,o=(g=-g,t=new m(t,e)).c,s=n.s,a=t.s,u=n.e,f=t.e;if(!s||!a)return null;if(r=i&&!i[0],e=o&&!o[0],r||e)return r?e?0:-a:s;if(s!=a)return s;if(r=s<0,e=u==f,!i||!o)return e?0:!i^r?1:-1;if(!e)return u>f^r?1:-1;for(s=-1,a=(u=i.length)<(f=o.length)?u:f;++s<a;)if(i[s]!=o[s])return i[s]>o[s]^r?1:-1;return u==f?0:u>f^r?1:-1},d.dividedBy=d.div=function(t,e){var r=this.c,n=this.e,i=this.s,o=(g=2,t=new m(t,e)).c,s=t.e,a=t.s,u=i==a?1:-1;return(n||r&&r[0])&&(s||o&&o[0])?E(r,o,n-s,u,10):new m(i&&a&&(r?!o||r[0]!=o[0]:o)?r&&0==r[0]||!o?0*u:u/0:NaN)},d.equals=d.eq=function(t,e){return g=3,0===this.cmp(t,e)},d.floor=function(){return U(this,0,3)},d.greaterThan=d.gt=function(t,e){return g=4,this.cmp(t,e)>0},d.greaterThanOrEqualTo=d.gte=d.gt=function(t,e){return g=5,1==(e=this.cmp(t,e))||0===e},d.isFinite=d.isF=function(){return!!this.c},d.isNaN=function(){return!this.s},d.isNegative=d.isNeg=function(){return this.s<0},d.isZero=d.isZ=function(){return!!this.c&&0==this.c[0]},d.lessThan=d.lt=function(t,e){return g=6,this.cmp(t,e)<0},d.lessThanOrEqualTo=d.lte=d.le=function(t,e){return g=7,-1==(e=this.cmp(t,e))||0===e},d.minus=d.sub=function(t,e){var r,n,i,o,s=this,u=s.s;if(e=(g=8,t=new m(t,e)).s,!u||!e)return new m(NaN);if(u!=e)return t.s=-e,s.plus(t);var f=s.c,c=s.e,l=t.c,p=t.e;if(!c||!p){if(!f||!l)return f?(t.s=-e,t):new m(l?s:NaN);if(!f[0]||!l[0])return l[0]?(t.s=-e,t):new m(f[0]?s:3==a?-0:0)}if(f=f.slice(),u=c-p){for((r=(o=u<0)?(u=-u,f):(p=c,l)).reverse(),e=u;e--;r.push(0));r.reverse()}else for(i=((o=f.length<l.length)?f:l).length,u=e=0;e<i;e++)if(f[e]!=l[e]){o=f[e]<l[e];break}if(o&&(r=f,f=l,l=r,t.s=-t.s),(e=-((i=f.length)-l.length))>0)for(;e--;f[i++]=0);for(e=l.length;e>u;){if(f[--e]<l[e]){for(n=e;n&&!f[--n];f[n]=9);--f[n],f[e]+=10}f[e]-=l[e]}for(;0==f[--i];f.pop());for(;0==f[0];f.shift(),--p);return(p<h||!f[0])&&(f[0]||(t.s=3==a?-1:1),f=[p=0]),t.c=f,t.e=p,t},d.modulo=d.mod=function(t,e){var r=this,n=r.c,i=(g=9,t=new m(t,e)).c,o=r.s,u=t.s;return(e=!o||!u||i&&!i[0])||n&&!n[0]?new m(e?NaN:r):(r.s=t.s=1,e=1==t.cmp(r),r.s=o,t.s=u,e?new m(r):(o=s,u=a,s=0,a=1,r=r.div(t),s=o,a=u,this.minus(r.times(t))))},d.negated=d.neg=function(){var t=new m(this);return t.s=-t.s||null,t},d.plus=d.add=function(t,e){var r,n=this,i=n.s;if(e=(g=10,t=new m(t,e)).s,!i||!e)return new m(NaN);if(i!=e)return t.s=-e,n.minus(t);var o=n.e,s=n.c,a=t.e,u=t.c;if(!o||!a){if(!s||!u)return new m(i/0);if(!s[0]||!u[0])return u[0]?t:new m(s[0]?n:0*i)}if(s=s.slice(),i=o-a){for((r=i>0?(a=o,u):(i=-i,s)).reverse();i--;r.push(0));r.reverse()}for(s.length-u.length<0&&(r=u,u=s,s=r),i=u.length,e=0;i;e=(s[--i]=s[i]+u[i]+e)/10^0,s[i]%=10);for(e&&(s.unshift(e),++a>c&&(s=a=null)),i=s.length;0==s[--i];s.pop());return t.c=s,t.e=a,t},d.toPower=d.pow=function(t){var e=0*t==0?0|t:t,r=new m(this),i=new m(w);if(((n=t<-1e6||t>1e6)&&(e=1*t/0)||p(t)!=t&&0!==t&&!(e=NaN))&&!A(t,"exponent","pow")||!e)return new m(Math.pow(r.toS(),e));for(e=e<0?-e:e;1&e&&(i=i.times(r)),e>>=1;)r=r.times(r);return t<0?w.div(i):i},d.powm=function(t,e){return this.pow(t).mod(e)},d.round=function(t,e){return U(this,t=null==t||((n=t<0||t>o)||p(t)!=t)&&!A(t,"decimal places","round")?0:0|t,e=null==e||((n=e<0||e>8)||p(e)!=e&&0!==e)&&!A(e,"mode","round")?a:0|e)},d.squareRoot=d.sqrt=function(){var t,e,r,n,i=this,o=i.c,u=i.s,f=i.e,h=s,c=a,l=new m("0.5");if(1!==u||!o||!o[0])return new m(!u||u<0&&(!o||o[0])?NaN:o?i:1/0);for(u=Math.sqrt(i.toS()),a=1,0==u||u==1/0?((t=o.join("")).length+f&1||(t+="0"),(e=new m(Math.sqrt(t)+"")).c||(e.c=[1]),e.e=((f+1)/2|0)-(f<0||1&f)):e=new m(t=u.toString()),(u=(r=e.e)+(s+=4))<3&&(u=0),f=u;;)if(n=e,e=l.times(n.plus(i.div(n))),n.c.slice(0,u).join("")===e.c.slice(0,u).join("")){if(9!=(o=e.c)[u-=t&&e.e<r]||9!=o[u-1]||9!=o[u-2]||!(9==o[u-3]||t&&4==o[u-3])){if(!(o[f]||o[f-1]||o[f-2]||o[f-3]&&5!=o[f-3]||(o.length>f-2&&(o.length=f-2),e.times(e).eq(i)))){for(;o.length<f-3;)o.push(0);o[f-3]++}return a=c,x(e,s=h,10),e}if(t&&9==o[u-3]&&(n=e.round(h,0)).times(n).eq(i))return a=c,s=h,n;s+=4,u+=4,t=""}},d.times=d.mul=function(t,e){var r,n=this,i=n.c,o=(g=11,t=new m(t,e)).c,s=n.e,a=t.e,u=n.s;if(t.s=u==(e=t.s)?1:-1,!(s||i&&i[0])||!(a||o&&o[0]))return new m(!u||!e||i&&!i[0]&&!o||o&&!o[0]&&!i?NaN:i&&o?0*t.s:t.s/0);for(t.e=s+a,(u=i.length)<(e=o.length)&&(r=i,i=o,o=r,a=u,u=e,e=a),a=u+e,r=[];a--;r.push(0));for(s=e-1;s>-1;s--){for(e=0,a=u+s;a>s;e=r[a]+o[s]*i[a-s-1]+e,r[a--]=e%10|0,e=e/10|0);e&&(r[a]=(r[a]+e)%10)}for(e&&++t.e,!r[0]&&r.shift(),a=r.length;!r[--a];r.pop());return t.c=t.e>c?t.e=null:t.e<h?[t.e=0]:r,t},d.toBuffer=function(t){if("string"==typeof t){if("mpint"!==t)return"Unsupported Buffer representation";var e=this.abs(),r=1===(h=e.toBuffer({size:1,endian:"big"})).length&&0===h[0]?0:h.length;128&h[0]&&r++;var n=new i(4+r);r>0&&h.copy(n,4+(128&h[0]?1:0)),128&h[0]&&(n[4]=0),n[0]=r&255<<24,n[1]=r&255<<16,n[2]=65280&r,n[3]=255&r;var o=this.lt(0);if(o)for(var s=4;s<n.length;s++)n[s]=255-n[s];return n[4]=127&n[4]|(o?128:0),o&&n[n.length-1]++,n}t||(t={});var a={1:"big","-1":"little"}[t.endian]||t.endian||"big",u=this.toString(16);if("-"===u.charAt(0))throw new Error("converting negative numbers to Buffers not supported yet");for(var f="auto"===t.size?Math.ceil(u.length/2):t.size||1,h=(r=Math.ceil(u.length/(2*f))*f,new i(r));u.length<2*r;)u="0"+u;return u.split(new RegExp("(.{"+2*f+"})")).filter((function(t){return t.length>0})).forEach((function(t,e){for(var r=0;r<f;r++)h[e*f+("big"===a?r:f-r-1)]=parseInt(t.slice(2*r,2*r+2),16)})),h},d.toExponential=d.toE=function(t){return B(this,(null==t||((n=t<0||t>o)||p(t)!=t&&0!==t)&&!A(t,"decimal places","toE"))&&this.c?this.c.length-1:0|t,1)},d.toFixed=d.toF=function(t){var e,r,i,s=this;return null==t||((n=t<0||t>o)||p(t)!=t&&0!==t)&&!A(t,"decimal places","toF")||(i=s.e+(0|t)),e=u,t=f,u=-(f=1/0),i==r?r=s.toS():(r=B(s,i),s.s<0&&s.c&&(s.c[0]?r.indexOf("-")<0&&(r="-"+r):r=r.replace(/^-/,""))),u=e,f=t,r},d.toFraction=d.toFr=function(t){var e,r,i,o,u,f,h,p=o=new m(w),d=i=new m("0"),y=this,v=y.c,b=c,_=s,E=a,B=new m(w);if(!v)return y.toS();for(h=B.e=v.length-y.e-1,(null==t||(!(g=12,f=new m(t)).s||(n=f.cmp(p)<0||!f.c)||l&&f.e<f.c.length-1)&&!A(t,"max denominator","toFr")||(t=f).cmp(B)>0)&&(t=h>0?B:p),c=1/0,f=new m(v.join("")),s=0,a=1;e=f.div(B),1!=(u=o.plus(e.times(d))).cmp(t);)o=d,d=u,p=i.plus(e.times(u=p)),i=u,B=f.minus(e.times(u=B)),f=u;return u=t.minus(o).div(d),i=i.plus(u.times(p)),o=o.plus(u.times(d)),i.s=p.s=y.s,s=2*h,a=E,r=p.div(d).minus(y).abs().cmp(i.div(o).minus(y).abs())<1?[p.toS(),d.toS()]:[i.toS(),o.toS()],c=b,s=_,r},d.toPrecision=d.toP=function(t){return null==t||((n=t<1||t>o)||p(t)!=t)&&!A(t,"precision","toP")?this.toS():B(this,0|--t,2)},d.toString=d.toS=function(t){var e,r,i,o=this,s=o.e;if(null===s)r=o.s?"Infinity":"NaN";else{if(t===e&&(s<=u||s>=f))return B(o,o.c.length-1,1);if(r=o.c.join(""),s<0){for(;++s;r="0"+r);r="0."+r}else if(i=r.length,s>0)if(++s>i)for(s-=i;s--;r+="0");else s<i&&(r=r.slice(0,s)+"."+r.slice(s));else if(e=r.charAt(0),i>1)r=e+"."+r.slice(1);else if("0"==e)return e;if(null!=t)if((n=!(t>=2&&t<65))||t!=(0|t)&&l)A(t,"base","toS");else if("0"==(r=_(r,0|t,10,o.s)))return r}return o.s<0?"-"+r:r},d.valueOf=function(){return this.toS()},t.exports=m},8764:(t,e,r)=>{"use strict";const n=r(9742),i=r(645),o="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=u,e.SlowBuffer=function(t){return+t!=t&&(t=0),u.alloc(+t)},e.INSPECT_MAX_BYTES=50;const s=2147483647;function a(t){if(t>s)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,u.prototype),e}function u(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return c(t)}return f(t,e,r)}function f(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!u.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const r=0|y(t,e);let n=a(r);const i=n.write(t,e);return i!==r&&(n=n.slice(0,i)),n}(t,e);if(ArrayBuffer.isView(t))return function(t){if(J(t,Uint8Array)){const e=new Uint8Array(t);return p(e.buffer,e.byteOffset,e.byteLength)}return l(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(J(t,ArrayBuffer)||t&&J(t.buffer,ArrayBuffer))return p(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&(J(t,SharedArrayBuffer)||t&&J(t.buffer,SharedArrayBuffer)))return p(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return u.from(n,e,r);const i=function(t){if(u.isBuffer(t)){const e=0|d(t.length),r=a(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||X(t.length)?a(0):l(t):"Buffer"===t.type&&Array.isArray(t.data)?l(t.data):void 0}(t);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return u.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function c(t){return h(t),a(t<0?0:0|d(t))}function l(t){const e=t.length<0?0:0|d(t.length),r=a(e);for(let n=0;n<e;n+=1)r[n]=255&t[n];return r}function p(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(n,u.prototype),n}function d(t){if(t>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|t}function y(t,e){if(u.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||J(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return W(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(t).length;default:if(i)return n?-1:W(t).length;e=(""+e).toLowerCase(),i=!0}}function g(t,e,r){let n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return T(this,e,r);case"utf8":case"utf-8":return U(this,e,r);case"ascii":return O(this,e,r);case"latin1":case"binary":return k(this,e,r);case"base64":return x(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function v(t,e,r){const n=t[e];t[e]=t[r],t[r]=n}function b(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),X(r=+r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:w(t,e,r,n,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):w(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function w(t,e,r,n,i){let o,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function f(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){let n=-1;for(o=r;o<a;o++)if(f(t,o)===f(e,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===u)return n*s}else-1!==n&&(o-=o-n),n=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){let r=!0;for(let n=0;n<u;n++)if(f(t,o+n)!==f(e,n)){r=!1;break}if(r)return o}return-1}function m(t,e,r,n){r=Number(r)||0;const i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;const o=e.length;let s;for(n>o/2&&(n=o/2),s=0;s<n;++s){const n=parseInt(e.substr(2*s,2),16);if(X(n))return s;t[r+s]=n}return s}function A(t,e,r,n){return Z(W(e,t.length-r),t,r,n)}function _(t,e,r,n){return Z(function(t){const e=[];for(let r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function E(t,e,r,n){return Z(q(e),t,r,n)}function B(t,e,r,n){return Z(function(t,e){let r,n,i;const o=[];for(let s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function x(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function U(t,e,r){r=Math.min(t.length,r);const n=[];let i=e;for(;i<r;){const e=t[i];let o=null,s=e>239?4:e>223?3:e>191?2:1;if(i+s<=r){let r,n,a,u;switch(s){case 1:e<128&&(o=e);break;case 2:r=t[i+1],128==(192&r)&&(u=(31&e)<<6|63&r,u>127&&(o=u));break;case 3:r=t[i+1],n=t[i+2],128==(192&r)&&128==(192&n)&&(u=(15&e)<<12|(63&r)<<6|63&n,u>2047&&(u<55296||u>57343)&&(o=u));break;case 4:r=t[i+1],n=t[i+2],a=t[i+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(u=(15&e)<<18|(63&r)<<12|(63&n)<<6|63&a,u>65535&&u<1114112&&(o=u))}}null===o?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=s}return function(t){const e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);let r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=S));return r}(n)}e.kMaxLength=s,u.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(t,e,r){return f(t,e,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(t,e,r){return function(t,e,r){return h(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},u.allocUnsafe=function(t){return c(t)},u.allocUnsafeSlow=function(t){return c(t)},u.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==u.prototype},u.compare=function(t,e){if(J(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),J(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let r=t.length,n=e.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);let r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;const n=u.allocUnsafe(e);let i=0;for(r=0;r<t.length;++r){let e=t[r];if(J(e,Uint8Array))i+e.length>n.length?(u.isBuffer(e)||(e=u.from(e)),e.copy(n,i)):Uint8Array.prototype.set.call(n,e,i);else{if(!u.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(n,i)}i+=e.length}return n},u.byteLength=y,u.prototype._isBuffer=!0,u.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)v(this,e,e+1);return this},u.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)v(this,e,e+3),v(this,e+1,e+2);return this},u.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)v(this,e,e+7),v(this,e+1,e+6),v(this,e+2,e+5),v(this,e+3,e+4);return this},u.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?U(this,0,t):g.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){let t="";const r=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},o&&(u.prototype[o]=u.prototype.inspect),u.prototype.compare=function(t,e,r,n,i){if(J(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;let o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0);const a=Math.min(o,s),f=this.slice(n,i),h=t.slice(e,r);for(let t=0;t<a;++t)if(f[t]!==h[t]){o=f[t],s=h[t];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return b(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return b(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return m(this,t,e,r);case"utf8":case"utf-8":return A(this,t,e,r);case"ascii":case"latin1":case"binary":return _(this,t,e,r);case"base64":return E(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const S=4096;function O(t,e,r){let n="";r=Math.min(t.length,r);for(let i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function k(t,e,r){let n="";r=Math.min(t.length,r);for(let i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function T(t,e,r){const n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=e;n<r;++n)i+=G[t[n]];return i}function I(t,e,r){const n=t.slice(e,r);let i="";for(let t=0;t<n.length-1;t+=2)i+=String.fromCharCode(n[t]+256*n[t+1]);return i}function C(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function L(t,e,r,n,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function R(t,e,r,n,i){z(e,n,i,t,r,7);let o=Number(e&BigInt(4294967295));t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o;let s=Number(e>>BigInt(32)&BigInt(4294967295));return t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s,r}function j(t,e,r,n,i){z(e,n,i,t,r,7);let o=Number(e&BigInt(4294967295));t[r+7]=o,o>>=8,t[r+6]=o,o>>=8,t[r+5]=o,o>>=8,t[r+4]=o;let s=Number(e>>BigInt(32)&BigInt(4294967295));return t[r+3]=s,s>>=8,t[r+2]=s,s>>=8,t[r+1]=s,s>>=8,t[r]=s,r+8}function N(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function M(t,e,r,n,o){return e=+e,r>>>=0,o||N(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function P(t,e,r,n,o){return e=+e,r>>>=0,o||N(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){const r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);const n=this.subarray(t,e);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||C(t,e,this.length);let n=this[t],i=1,o=0;for(;++o<e&&(i*=256);)n+=this[t+o]*i;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||C(t,e,this.length);let n=this[t+--e],i=1;for(;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUint8=u.prototype.readUInt8=function(t,e){return t>>>=0,e||C(t,1,this.length),this[t]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(t,e){return t>>>=0,e||C(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(t,e){return t>>>=0,e||C(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(t,e){return t>>>=0,e||C(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(t,e){return t>>>=0,e||C(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readBigUInt64LE=K((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||D(t,this.length-8);const n=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,i=this[++t]+256*this[++t]+65536*this[++t]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),u.prototype.readBigUInt64BE=K((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||D(t,this.length-8);const n=e*2**24+65536*this[++t]+256*this[++t]+this[++t],i=this[++t]*2**24+65536*this[++t]+256*this[++t]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),u.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||C(t,e,this.length);let n=this[t],i=1,o=0;for(;++o<e&&(i*=256);)n+=this[t+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||C(t,e,this.length);let n=e,i=1,o=this[t+--n];for(;n>0&&(i*=256);)o+=this[t+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return t>>>=0,e||C(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){t>>>=0,e||C(t,2,this.length);const r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){t>>>=0,e||C(t,2,this.length);const r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return t>>>=0,e||C(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return t>>>=0,e||C(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readBigInt64LE=K((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||D(t,this.length-8);const n=this[t+4]+256*this[t+5]+65536*this[t+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),u.prototype.readBigInt64BE=K((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||D(t,this.length-8);const n=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(n)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+r)})),u.prototype.readFloatLE=function(t,e){return t>>>=0,e||C(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return t>>>=0,e||C(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return t>>>=0,e||C(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return t>>>=0,e||C(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||L(this,t,e,r,Math.pow(2,8*r)-1,0);let i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||L(this,t,e,r,Math.pow(2,8*r)-1,0);let i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,1,255,0),this[e]=255&t,e+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeBigUInt64LE=K((function(t,e=0){return R(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeBigUInt64BE=K((function(t,e=0){return j(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);L(this,t,e,r,n-1,-n)}let i=0,o=1,s=0;for(this[e]=255&t;++i<r&&(o*=256);)t<0&&0===s&&0!==this[e+i-1]&&(s=1),this[e+i]=(t/o>>0)-s&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);L(this,t,e,r,n-1,-n)}let i=r-1,o=1,s=0;for(this[e+i]=255&t;--i>=0&&(o*=256);)t<0&&0===s&&0!==this[e+i+1]&&(s=1),this[e+i]=(t/o>>0)-s&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeBigInt64LE=K((function(t,e=0){return R(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeBigInt64BE=K((function(t,e=0){return j(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeFloatLE=function(t,e,r){return M(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return M(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return P(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return P(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(!u.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);const i=n-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),i},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){const e=t.charCodeAt(0);("utf8"===n&&e<128||"latin1"===n)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;let i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{const o=u.isBuffer(t)?t:u.from(t,n),s=o.length;if(0===s)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(i=0;i<r-e;++i)this[i+e]=o[i%s]}return this};const H={};function F(t,e,r){H[t]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function $(t){let e="",r=t.length;const n="-"===t[0]?1:0;for(;r>=n+4;r-=3)e=`_${t.slice(r-3,r)}${e}`;return`${t.slice(0,r)}${e}`}function z(t,e,r,n,i,o){if(t>r||t<e){const n="bigint"==typeof e?"n":"";let i;throw i=o>3?0===e||e===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${e}${n} and <= ${r}${n}`,new H.ERR_OUT_OF_RANGE("value",i,t)}!function(t,e,r){V(e,"offset"),void 0!==t[e]&&void 0!==t[e+r]||D(e,t.length-(r+1))}(n,i,o)}function V(t,e){if("number"!=typeof t)throw new H.ERR_INVALID_ARG_TYPE(e,"number",t)}function D(t,e,r){if(Math.floor(t)!==t)throw V(t,r),new H.ERR_OUT_OF_RANGE(r||"offset","an integer",t);if(e<0)throw new H.ERR_BUFFER_OUT_OF_BOUNDS;throw new H.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${e}`,t)}F("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),F("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),F("ERR_OUT_OF_RANGE",(function(t,e,r){let n=`The value of "${t}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=$(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=$(i)),i+="n"),n+=` It must be ${e}. Received ${i}`,n}),RangeError);const Y=/[^+/0-9A-Za-z-_]/g;function W(t,e){let r;e=e||1/0;const n=t.length;let i=null;const o=[];for(let s=0;s<n;++s){if(r=t.charCodeAt(s),r>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function q(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(Y,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function Z(t,e,r,n){let i;for(i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function J(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function X(t){return t!=t}const G=function(){const t="0123456789abcdef",e=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)e[n+i]=t[r]+t[i]}return e}();function K(t){return"undefined"==typeof BigInt?Q:t}function Q(){throw new Error("BigInt not supported")}},1964:function(t,e,r){var n,i;!function(o,s){"use strict";var a=Math.pow(2,-24),u=Math.pow(2,32),f=Math.pow(2,53);(i="function"==typeof(n={encode:function(t){var e,r=new ArrayBuffer(256),n=new DataView(r),i=0;function o(t){for(var o=r.byteLength,s=i+t;o<s;)o*=2;if(o!==r.byteLength){var a=n;r=new ArrayBuffer(o),n=new DataView(r);for(var u=i+3>>2,f=0;f<u;++f)n.setUint32(4*f,a.getUint32(4*f))}return e=t,n}function a(){i+=e}function h(t){a(o(1).setUint8(i,t))}function c(t){for(var e=o(t.length),r=0;r<t.length;++r)e.setUint8(i+r,t[r]);a()}function l(t,e){e<24?h(t<<5|e):e<256?(h(t<<5|24),h(e)):e<65536?(h(t<<5|25),function(t){a(o(2).setUint16(i,t))}(e)):e<4294967296?(h(t<<5|26),function(t){a(o(4).setUint32(i,t))}(e)):(h(t<<5|27),function(t){var e=t%u,r=(t-e)/u,n=o(8);n.setUint32(i,r),n.setUint32(i+4,e),a()}(e))}if(function t(e){var r;if(!1===e)return h(244);if(!0===e)return h(245);if(null===e)return h(246);if(e===s)return h(247);switch(typeof e){case"number":if(Math.floor(e)===e){if(0<=e&&e<=f)return l(0,e);if(-f<=e&&e<0)return l(1,-(e+1))}return h(251),function(t){a(o(8).setFloat64(i,t))}(e);case"string":var n=[];for(r=0;r<e.length;++r){var u=e.charCodeAt(r);u<128?n.push(u):u<2048?(n.push(192|u>>6),n.push(128|63&u)):u<55296?(n.push(224|u>>12),n.push(128|u>>6&63),n.push(128|63&u)):(u=(1023&u)<<10,u|=1023&e.charCodeAt(++r),u+=65536,n.push(240|u>>18),n.push(128|u>>12&63),n.push(128|u>>6&63),n.push(128|63&u))}return l(3,n.length),c(n);default:var p;if(Array.isArray(e))for(l(4,p=e.length),r=0;r<p;++r)t(e[r]);else if(e instanceof Uint8Array)l(2,e.length),c(e);else{var d=Object.keys(e);for(l(5,p=d.length),r=0;r<p;++r){var y=d[r];t(y),t(e[y])}}}}(t),"slice"in r)return r.slice(0,i);for(var p=new ArrayBuffer(i),d=new DataView(p),y=0;y<i;++y)d.setUint8(y,n.getUint8(y));return p},decode:function(t,e,r){var n=new DataView(t),i=0;function o(t,e){return i+=e,t}function f(e){return o(new Uint8Array(t,i,e),e)}function h(){return o(n.getUint8(i),1)}function c(){return o(n.getUint16(i),2)}function l(){return o(n.getUint32(i),4)}function p(){return 255===n.getUint8(i)&&(i+=1,!0)}function d(t){if(t<24)return t;if(24===t)return h();if(25===t)return c();if(26===t)return l();if(27===t)return l()*u+l();if(31===t)return-1;throw"Invalid length encoding"}function y(t){var e=h();if(255===e)return-1;var r=d(31&e);if(r<0||e>>5!==t)throw"Invalid indefinite length element";return r}function g(t,e){for(var r=0;r<e;++r){var n=h();128&n&&(n<224?(n=(31&n)<<6|63&h(),e-=1):n<240?(n=(15&n)<<12|(63&h())<<6|63&h(),e-=2):(n=(15&n)<<18|(63&h())<<12|(63&h())<<6|63&h(),e-=3)),n<65536?t.push(n):(n-=65536,t.push(55296|n>>10),t.push(56320|1023&n))}}"function"!=typeof e&&(e=function(t){return t}),"function"!=typeof r&&(r=function(){return s});var v=function t(){var u,l,v=h(),b=v>>5,w=31&v;if(7===b)switch(w){case 25:return function(){var t=new ArrayBuffer(4),e=new DataView(t),r=c(),n=32768&r,i=31744&r,o=1023&r;if(31744===i)i=261120;else if(0!==i)i+=114688;else if(0!==o)return o*a;return e.setUint32(0,n<<16|i<<13|o<<13),e.getFloat32(0)}();case 26:return o(n.getFloat32(i),4);case 27:return o(n.getFloat64(i),8)}if((l=d(w))<0&&(b<2||6<b))throw"Invalid length";switch(b){case 0:return l;case 1:return-1-l;case 2:if(l<0){for(var m=[],A=0;(l=y(b))>=0;)A+=l,m.push(f(l));var _=new Uint8Array(A),E=0;for(u=0;u<m.length;++u)_.set(m[u],E),E+=m[u].length;return _}return f(l);case 3:var B=[];if(l<0)for(;(l=y(b))>=0;)g(B,l);else g(B,l);return String.fromCharCode.apply(null,B);case 4:var x;if(l<0)for(x=[];!p();)x.push(t());else for(x=new Array(l),u=0;u<l;++u)x[u]=t();return x;case 5:var U={};for(u=0;u<l||l<0&&!p();++u)U[t()]=t();return U;case 6:return e(t(),l);case 7:switch(l){case 20:return!1;case 21:return!0;case 22:return null;case 23:return s;default:return r(l)}}}();if(i!==t.byteLength)throw"Remaining bytes";return v}})?n.call(e,r,e,t):n)===s||(t.exports=i)}()},5057:(t,e,r)=>{"use strict";r.r(e),r.d(e,{crc1:()=>a,crc16:()=>g,crc16ccitt:()=>w,crc16kermit:()=>S,crc16modbus:()=>_,crc16xmodem:()=>B,crc24:()=>T,crc32:()=>L,crc8:()=>h,crc81wire:()=>p,crcjam:()=>N,default:()=>M});var n=r(3032);const i=n.lW.from&&n.lW.alloc&&n.lW.allocUnsafe&&n.lW.allocUnsafeSlow?n.lW.from:t=>new n.lW(t);function o(t,e){const r=(t,r)=>e(t,r)>>>0;return r.signed=e,r.unsigned=r,r.model=t,r}const s=o("crc1",(function(t,e){n.lW.isBuffer(t)||(t=i(t));let r=~~e,o=0;for(let e=0;e<t.length;e++)o+=t[e];return r+=o%256,r%256})),a=s;let u=[0,7,14,9,28,27,18,21,56,63,54,49,36,35,42,45,112,119,126,121,108,107,98,101,72,79,70,65,84,83,90,93,224,231,238,233,252,251,242,245,216,223,214,209,196,195,202,205,144,151,158,153,140,139,130,133,168,175,166,161,180,179,186,189,199,192,201,206,219,220,213,210,255,248,241,246,227,228,237,234,183,176,185,190,171,172,165,162,143,136,129,134,147,148,157,154,39,32,41,46,59,60,53,50,31,24,17,22,3,4,13,10,87,80,89,94,75,76,69,66,111,104,97,102,115,116,125,122,137,142,135,128,149,146,155,156,177,182,191,184,173,170,163,164,249,254,247,240,229,226,235,236,193,198,207,200,221,218,211,212,105,110,103,96,117,114,123,124,81,86,95,88,77,74,67,68,25,30,23,16,5,2,11,12,33,38,47,40,61,58,51,52,78,73,64,71,82,85,92,91,118,113,120,127,106,109,100,99,62,57,48,55,34,37,44,43,6,1,8,15,26,29,20,19,174,169,160,167,178,181,188,187,150,145,152,159,138,141,132,131,222,217,208,215,194,197,204,203,230,225,232,239,250,253,244,243];"undefined"!=typeof Int32Array&&(u=new Int32Array(u));const f=o("crc-8",(function(t,e){n.lW.isBuffer(t)||(t=i(t));let r=~~e;for(let e=0;e<t.length;e++){const n=t[e];r=255&u[255&(r^n)]}return r})),h=f;let c=[0,94,188,226,97,63,221,131,194,156,126,32,163,253,31,65,157,195,33,127,252,162,64,30,95,1,227,189,62,96,130,220,35,125,159,193,66,28,254,160,225,191,93,3,128,222,60,98,190,224,2,92,223,129,99,61,124,34,192,158,29,67,161,255,70,24,250,164,39,121,155,197,132,218,56,102,229,187,89,7,219,133,103,57,186,228,6,88,25,71,165,251,120,38,196,154,101,59,217,135,4,90,184,230,167,249,27,69,198,152,122,36,248,166,68,26,153,199,37,123,58,100,134,216,91,5,231,185,140,210,48,110,237,179,81,15,78,16,242,172,47,113,147,205,17,79,173,243,112,46,204,146,211,141,111,49,178,236,14,80,175,241,19,77,206,144,114,44,109,51,209,143,12,82,176,238,50,108,142,208,83,13,239,177,240,174,76,18,145,207,45,115,202,148,118,40,171,245,23,73,8,86,180,234,105,55,213,139,87,9,235,181,54,104,138,212,149,203,41,119,244,170,72,22,233,183,85,11,136,214,52,106,43,117,151,201,74,20,246,168,116,42,200,150,21,75,169,247,182,232,10,84,215,137,107,53];"undefined"!=typeof Int32Array&&(c=new Int32Array(c));const l=o("dallas-1-wire",(function(t,e){n.lW.isBuffer(t)||(t=i(t));let r=~~e;for(let e=0;e<t.length;e++){const n=t[e];r=255&c[255&(r^n)]}return r})),p=l;let d=[0,49345,49537,320,49921,960,640,49729,50689,1728,1920,51009,1280,50625,50305,1088,52225,3264,3456,52545,3840,53185,52865,3648,2560,51905,52097,2880,51457,2496,2176,51265,55297,6336,6528,55617,6912,56257,55937,6720,7680,57025,57217,8e3,56577,7616,7296,56385,5120,54465,54657,5440,55041,6080,5760,54849,53761,4800,4992,54081,4352,53697,53377,4160,61441,12480,12672,61761,13056,62401,62081,12864,13824,63169,63361,14144,62721,13760,13440,62529,15360,64705,64897,15680,65281,16320,16e3,65089,64001,15040,15232,64321,14592,63937,63617,14400,10240,59585,59777,10560,60161,11200,10880,59969,60929,11968,12160,61249,11520,60865,60545,11328,58369,9408,9600,58689,9984,59329,59009,9792,8704,58049,58241,9024,57601,8640,8320,57409,40961,24768,24960,41281,25344,41921,41601,25152,26112,42689,42881,26432,42241,26048,25728,42049,27648,44225,44417,27968,44801,28608,28288,44609,43521,27328,27520,43841,26880,43457,43137,26688,30720,47297,47489,31040,47873,31680,31360,47681,48641,32448,32640,48961,32e3,48577,48257,31808,46081,29888,30080,46401,30464,47041,46721,30272,29184,45761,45953,29504,45313,29120,28800,45121,20480,37057,37249,20800,37633,21440,21120,37441,38401,22208,22400,38721,21760,38337,38017,21568,39937,23744,23936,40257,24320,40897,40577,24128,23040,39617,39809,23360,39169,22976,22656,38977,34817,18624,18816,35137,19200,35777,35457,19008,19968,36545,36737,20288,36097,19904,19584,35905,17408,33985,34177,17728,34561,18368,18048,34369,33281,17088,17280,33601,16640,33217,32897,16448];"undefined"!=typeof Int32Array&&(d=new Int32Array(d));const y=o("crc-16",(function(t,e){n.lW.isBuffer(t)||(t=i(t));let r=~~e;for(let e=0;e<t.length;e++){const n=t[e];r=65535&(d[255&(r^n)]^r>>8)}return r})),g=y;let v=[0,4129,8258,12387,16516,20645,24774,28903,33032,37161,41290,45419,49548,53677,57806,61935,4657,528,12915,8786,21173,17044,29431,25302,37689,33560,45947,41818,54205,50076,62463,58334,9314,13379,1056,5121,25830,29895,17572,21637,42346,46411,34088,38153,58862,62927,50604,54669,13907,9842,5649,1584,30423,26358,22165,18100,46939,42874,38681,34616,63455,59390,55197,51132,18628,22757,26758,30887,2112,6241,10242,14371,51660,55789,59790,63919,35144,39273,43274,47403,23285,19156,31415,27286,6769,2640,14899,10770,56317,52188,64447,60318,39801,35672,47931,43802,27814,31879,19684,23749,11298,15363,3168,7233,60846,64911,52716,56781,44330,48395,36200,40265,32407,28342,24277,20212,15891,11826,7761,3696,65439,61374,57309,53244,48923,44858,40793,36728,37256,33193,45514,41451,53516,49453,61774,57711,4224,161,12482,8419,20484,16421,28742,24679,33721,37784,41979,46042,49981,54044,58239,62302,689,4752,8947,13010,16949,21012,25207,29270,46570,42443,38312,34185,62830,58703,54572,50445,13538,9411,5280,1153,29798,25671,21540,17413,42971,47098,34713,38840,59231,63358,50973,55100,9939,14066,1681,5808,26199,30326,17941,22068,55628,51565,63758,59695,39368,35305,47498,43435,22596,18533,30726,26663,6336,2273,14466,10403,52093,56156,60223,64286,35833,39896,43963,48026,19061,23124,27191,31254,2801,6864,10931,14994,64814,60687,56684,52557,48554,44427,40424,36297,31782,27655,23652,19525,15522,11395,7392,3265,61215,65342,53085,57212,44955,49082,36825,40952,28183,32310,20053,24180,11923,16050,3793,7920];"undefined"!=typeof Int32Array&&(v=new Int32Array(v));const b=o("ccitt",(function(t,e){n.lW.isBuffer(t)||(t=i(t));let r=void 0!==e?~~e:65535;for(let e=0;e<t.length;e++){const n=t[e];r=65535&(v[255&(r>>8^n)]^r<<8)}return r})),w=b;let m=[0,49345,49537,320,49921,960,640,49729,50689,1728,1920,51009,1280,50625,50305,1088,52225,3264,3456,52545,3840,53185,52865,3648,2560,51905,52097,2880,51457,2496,2176,51265,55297,6336,6528,55617,6912,56257,55937,6720,7680,57025,57217,8e3,56577,7616,7296,56385,5120,54465,54657,5440,55041,6080,5760,54849,53761,4800,4992,54081,4352,53697,53377,4160,61441,12480,12672,61761,13056,62401,62081,12864,13824,63169,63361,14144,62721,13760,13440,62529,15360,64705,64897,15680,65281,16320,16e3,65089,64001,15040,15232,64321,14592,63937,63617,14400,10240,59585,59777,10560,60161,11200,10880,59969,60929,11968,12160,61249,11520,60865,60545,11328,58369,9408,9600,58689,9984,59329,59009,9792,8704,58049,58241,9024,57601,8640,8320,57409,40961,24768,24960,41281,25344,41921,41601,25152,26112,42689,42881,26432,42241,26048,25728,42049,27648,44225,44417,27968,44801,28608,28288,44609,43521,27328,27520,43841,26880,43457,43137,26688,30720,47297,47489,31040,47873,31680,31360,47681,48641,32448,32640,48961,32e3,48577,48257,31808,46081,29888,30080,46401,30464,47041,46721,30272,29184,45761,45953,29504,45313,29120,28800,45121,20480,37057,37249,20800,37633,21440,21120,37441,38401,22208,22400,38721,21760,38337,38017,21568,39937,23744,23936,40257,24320,40897,40577,24128,23040,39617,39809,23360,39169,22976,22656,38977,34817,18624,18816,35137,19200,35777,35457,19008,19968,36545,36737,20288,36097,19904,19584,35905,17408,33985,34177,17728,34561,18368,18048,34369,33281,17088,17280,33601,16640,33217,32897,16448];"undefined"!=typeof Int32Array&&(m=new Int32Array(m));const A=o("crc-16-modbus",(function(t,e){n.lW.isBuffer(t)||(t=i(t));let r=void 0!==e?~~e:65535;for(let e=0;e<t.length;e++){const n=t[e];r=65535&(m[255&(r^n)]^r>>8)}return r})),_=A,E=o("xmodem",(function(t,e){n.lW.isBuffer(t)||(t=i(t));let r=void 0!==e?~~e:0;for(let e=0;e<t.length;e++){let n=r>>>8&255;n^=255&t[e],n^=n>>>4,r=r<<8&65535,r^=n,n=n<<5&65535,r^=n,n=n<<7&65535,r^=n}return r})),B=E;let x=[0,4489,8978,12955,17956,22445,25910,29887,35912,40385,44890,48851,51820,56293,59774,63735,4225,264,13203,8730,22181,18220,30135,25662,40137,36160,49115,44626,56045,52068,63999,59510,8450,12427,528,5017,26406,30383,17460,21949,44362,48323,36440,40913,60270,64231,51324,55797,12675,8202,4753,792,30631,26158,21685,17724,48587,44098,40665,36688,64495,60006,55549,51572,16900,21389,24854,28831,1056,5545,10034,14011,52812,57285,60766,64727,34920,39393,43898,47859,21125,17164,29079,24606,5281,1320,14259,9786,57037,53060,64991,60502,39145,35168,48123,43634,25350,29327,16404,20893,9506,13483,1584,6073,61262,65223,52316,56789,43370,47331,35448,39921,29575,25102,20629,16668,13731,9258,5809,1848,65487,60998,56541,52564,47595,43106,39673,35696,33800,38273,42778,46739,49708,54181,57662,61623,2112,6601,11090,15067,20068,24557,28022,31999,38025,34048,47003,42514,53933,49956,61887,57398,6337,2376,15315,10842,24293,20332,32247,27774,42250,46211,34328,38801,58158,62119,49212,53685,10562,14539,2640,7129,28518,32495,19572,24061,46475,41986,38553,34576,62383,57894,53437,49460,14787,10314,6865,2904,32743,28270,23797,19836,50700,55173,58654,62615,32808,37281,41786,45747,19012,23501,26966,30943,3168,7657,12146,16123,54925,50948,62879,58390,37033,33056,46011,41522,23237,19276,31191,26718,7393,3432,16371,11898,59150,63111,50204,54677,41258,45219,33336,37809,27462,31439,18516,23005,11618,15595,3696,8185,63375,58886,54429,50452,45483,40994,37561,33584,31687,27214,22741,18780,15843,11370,7921,3960];"undefined"!=typeof Int32Array&&(x=new Int32Array(x));const U=o("kermit",(function(t,e){n.lW.isBuffer(t)||(t=i(t));let r=void 0!==e?~~e:0;for(let e=0;e<t.length;e++){const n=t[e];r=65535&(x[255&(r^n)]^r>>8)}return r})),S=U;let O=[0,8801531,9098509,825846,9692897,1419802,1651692,10452759,10584377,2608578,2839604,11344079,3303384,11807523,12104405,4128302,12930697,4391538,5217156,13227903,5679208,13690003,14450021,5910942,6606768,14844747,15604413,6837830,16197969,7431594,8256604,16494759,840169,9084178,8783076,18463,10434312,1670131,1434117,9678590,11358416,2825259,2590173,10602790,4109873,12122826,11821884,3289031,13213536,5231515,4409965,12912278,5929345,14431610,13675660,5693559,6823513,15618722,14863188,6588335,16513208,8238147,7417269,16212302,1680338,10481449,9664223,1391140,9061683,788936,36926,8838341,12067563,4091408,3340262,11844381,2868234,11372785,10555655,2579964,14478683,5939616,5650518,13661357,5180346,13190977,12967607,4428364,8219746,16457881,16234863,7468436,15633027,6866552,6578062,14816117,1405499,9649856,10463030,1698765,8819930,55329,803287,9047340,11858690,3325945,4072975,12086004,2561507,10574104,11387118,2853909,13647026,5664841,5958079,14460228,4446803,12949160,13176670,5194661,7454091,16249200,16476294,8201341,14834538,6559633,6852199,15647388,3360676,11864927,12161705,4185682,10527045,2551230,2782280,11286707,9619101,1346150,1577872,10379115,73852,8875143,9172337,899466,16124205,7357910,8182816,16421083,6680524,14918455,15678145,6911546,5736468,13747439,14507289,5968354,12873461,4334094,5159928,13170435,4167245,12180150,11879232,3346363,11301036,2767959,2532769,10545498,10360692,1596303,1360505,9604738,913813,9157998,8856728,92259,16439492,8164415,7343561,16138546,6897189,15692510,14936872,6662099,5986813,14488838,13733104,5750795,13156124,5174247,4352529,12855018,2810998,11315341,10498427,2522496,12124823,4148844,3397530,11901793,9135439,862644,110658,8912057,1606574,10407765,9590435,1317464,15706879,6940164,6651890,14889737,8145950,16384229,16161043,7394792,5123014,13133629,12910283,4370992,14535975,5997020,5707818,13718737,2504095,10516836,11329682,2796649,11916158,3383173,4130419,12143240,8893606,129117,876971,9121104,1331783,9576124,10389322,1625009,14908182,6633453,6925851,15721184,7380471,16175372,16402682,8127489,4389423,12891860,13119266,5137369,13704398,5722165,6015427,14517560];"undefined"!=typeof Int32Array&&(O=new Int32Array(O));const k=o("crc-24",(function(t,e){n.lW.isBuffer(t)||(t=i(t));let r=void 0!==e?~~e:11994318;for(let e=0;e<t.length;e++){const n=t[e];r=16777215&(O[255&(r>>16^n)]^r<<8)}return r})),T=k;let I=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];"undefined"!=typeof Int32Array&&(I=new Int32Array(I));const C=o("crc-32",(function(t,e){n.lW.isBuffer(t)||(t=i(t));let r=0===e?0:-1^~~e;for(let e=0;e<t.length;e++){const n=t[e];r=I[255&(r^n)]^r>>>8}return-1^r})),L=C;let R=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];"undefined"!=typeof Int32Array&&(R=new Int32Array(R));const j=o("jam",(function(t,e=-1){n.lW.isBuffer(t)||(t=i(t));let r=0===e?0:~~e;for(let e=0;e<t.length;e++){const n=t[e];r=R[255&(r^n)]^r>>>8}return r})),N=j,M={crc1:a,crc8:h,crc81wire:p,crc16:g,crc16ccitt:w,crc16modbus:_,crc16xmodem:B,crc16kermit:S,crc24:T,crc32:L,crcjam:j}},3032:(t,e,r)=>{"use strict";var n=r(9742),i=r(645),o="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.lW=u,e.h2=50;var s=2147483647;function a(t){if(t>s)throw new RangeError('The value "'+t+'" is invalid for option "size"');var e=new Uint8Array(t);return Object.setPrototypeOf(e,u.prototype),e}function u(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return c(t)}return f(t,e,r)}function f(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!u.isEncoding(e))throw new TypeError("Unknown encoding: "+e);var r=0|y(t,e),n=a(r),i=n.write(t,e);return i!==r&&(n=n.slice(0,i)),n}(t,e);if(ArrayBuffer.isView(t))return function(t){if($(t,Uint8Array)){var e=new Uint8Array(t);return p(e.buffer,e.byteOffset,e.byteLength)}return l(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if($(t,ArrayBuffer)||t&&$(t.buffer,ArrayBuffer))return p(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&($(t,SharedArrayBuffer)||t&&$(t.buffer,SharedArrayBuffer)))return p(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return u.from(n,e,r);var i=function(t){if(u.isBuffer(t)){var e=0|d(t.length),r=a(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||z(t.length)?a(0):l(t):"Buffer"===t.type&&Array.isArray(t.data)?l(t.data):void 0}(t);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return u.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function c(t){return h(t),a(t<0?0:0|d(t))}function l(t){for(var e=t.length<0?0:0|d(t.length),r=a(e),n=0;n<e;n+=1)r[n]=255&t[n];return r}function p(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(n,u.prototype),n}function d(t){if(t>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|t}function y(t,e){if(u.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||$(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;for(var i=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return P(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return H(t).length;default:if(i)return n?-1:P(t).length;e=(""+e).toLowerCase(),i=!0}}function g(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return T(this,e,r);case"utf8":case"utf-8":return U(this,e,r);case"ascii":return O(this,e,r);case"latin1":case"binary":return k(this,e,r);case"base64":return x(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function v(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function b(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),z(r=+r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:w(t,e,r,n,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):w(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function w(t,e,r,n,i){var o,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function f(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var h=-1;for(o=r;o<a;o++)if(f(t,o)===f(e,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===u)return h*s}else-1!==h&&(o-=o-h),h=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var c=!0,l=0;l<u;l++)if(f(t,o+l)!==f(e,l)){c=!1;break}if(c)return o}return-1}function m(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;n>o/2&&(n=o/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(z(a))return s;t[r+s]=a}return s}function A(t,e,r,n){return F(P(e,t.length-r),t,r,n)}function _(t,e,r,n){return F(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function E(t,e,r,n){return F(H(e),t,r,n)}function B(t,e,r,n){return F(function(t,e){for(var r,n,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=(r=t.charCodeAt(s))>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function x(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function U(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,s,a,u,f=t[i],h=null,c=f>239?4:f>223?3:f>191?2:1;if(i+c<=r)switch(c){case 1:f<128&&(h=f);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&f)<<6|63&o)>127&&(h=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&f)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&f)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(h=u)}null===h?(h=65533,c=1):h>65535&&(h-=65536,n.push(h>>>10&1023|55296),h=56320|1023&h),n.push(h),i+=c}return function(t){var e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);for(var r="",n=0;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=S));return r}(n)}u.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(t,e,r){return f(t,e,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(t,e,r){return function(t,e,r){return h(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},u.allocUnsafe=function(t){return c(t)},u.allocUnsafeSlow=function(t){return c(t)},u.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==u.prototype},u.compare=function(t,e){if($(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),$(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var r=t.length,n=e.length,i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var o=t[r];if($(o,Uint8Array))i+o.length>n.length?u.from(o).copy(n,i):Uint8Array.prototype.set.call(n,o,i);else{if(!u.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i)}i+=o.length}return n},u.byteLength=y,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)v(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)v(this,e,e+3),v(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)v(this,e,e+7),v(this,e+1,e+6),v(this,e+2,e+5),v(this,e+3,e+4);return this},u.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?U(this,0,t):g.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.h2;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},o&&(u.prototype[o]=u.prototype.inspect),u.prototype.compare=function(t,e,r,n,i){if($(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0),a=Math.min(o,s),f=this.slice(n,i),h=t.slice(e,r),c=0;c<a;++c)if(f[c]!==h[c]){o=f[c],s=h[c];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return b(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return b(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return m(this,t,e,r);case"utf8":case"utf-8":return A(this,t,e,r);case"ascii":case"latin1":case"binary":return _(this,t,e,r);case"base64":return E(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function O(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function k(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function T(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=e;o<r;++o)i+=V[t[o]];return i}function I(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length-1;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function C(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function L(t,e,r,n,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function R(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function j(t,e,r,n,o){return e=+e,r>>>=0,o||R(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function N(t,e,r,n,o){return e=+e,r>>>=0,o||R(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);var n=this.subarray(t,e);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||C(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||C(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUint8=u.prototype.readUInt8=function(t,e){return t>>>=0,e||C(t,1,this.length),this[t]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(t,e){return t>>>=0,e||C(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(t,e){return t>>>=0,e||C(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(t,e){return t>>>=0,e||C(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(t,e){return t>>>=0,e||C(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||C(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||C(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return t>>>=0,e||C(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){t>>>=0,e||C(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){t>>>=0,e||C(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return t>>>=0,e||C(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return t>>>=0,e||C(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return t>>>=0,e||C(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return t>>>=0,e||C(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return t>>>=0,e||C(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return t>>>=0,e||C(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||L(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||L(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,1,255,0),this[e]=255&t,e+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);L(this,t,e,r,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<r&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);L(this,t,e,r,i-1,-i)}var o=r-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeFloatLE=function(t,e,r){return j(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return j(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return N(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return N(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(!u.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i=n-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),i},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){var i=t.charCodeAt(0);("utf8"===n&&i<128||"latin1"===n)&&(t=i)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var o;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(o=e;o<r;++o)this[o]=t;else{var s=u.isBuffer(t)?t:u.from(t,n),a=s.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(o=0;o<r-e;++o)this[o+e]=s[o%a]}return this};var M=/[^+/0-9A-Za-z-_]/g;function P(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function H(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(M,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function F(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function $(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function z(t){return t!=t}var V=function(){for(var t="0123456789abcdef",e=new Array(256),r=0;r<16;++r)for(var n=16*r,i=0;i<16;++i)e[n+i]=t[r]+t[i];return e}()},645:(t,e)=>{e.read=function(t,e,r,n,i){var o,s,a=8*i-n-1,u=(1<<a)-1,f=u>>1,h=-7,c=r?i-1:0,l=r?-1:1,p=t[e+c];for(c+=l,o=p&(1<<-h)-1,p>>=-h,h+=a;h>0;o=256*o+t[e+c],c+=l,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=n;h>0;s=256*s+t[e+c],c+=l,h-=8);if(0===o)o=1-f;else{if(o===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),o-=f}return(p?-1:1)*s*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var s,a,u,f=8*o-i-1,h=(1<<f)-1,c=h>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:o-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+c>=1?l/u:l*Math.pow(2,1-c))*u>=2&&(s++,u/=2),s+c>=h?(a=0,s=h):s+c>=1?(a=(e*u-1)*Math.pow(2,i),s+=c):(a=e*Math.pow(2,c-1)*Math.pow(2,i),s=0));i>=8;t[r+p]=255&a,p+=d,a/=256,i-=8);for(s=s<<i|a,f+=i;f>0;t[r+p]=255&s,p+=d,s/=256,f-=8);t[r+p-d]|=128*y}},3434:(t,e,r)=>{var n,i=r(4155);!function(){"use strict";var e="input is invalid type",o="object"==typeof window,s=o?window:{};s.JS_SHA512_NO_WINDOW&&(o=!1);var a=!o&&"object"==typeof self;!s.JS_SHA512_NO_NODE_JS&&"object"==typeof i&&i.versions&&i.versions.node?s=r.g:a&&(s=self);var u=!s.JS_SHA512_NO_COMMON_JS&&t.exports,f=r.amdO,h=!s.JS_SHA512_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,c="0123456789abcdef".split(""),l=[-2147483648,8388608,32768,128],p=[24,16,8,0],d=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],y=["hex","array","digest","arrayBuffer"],g=[];!s.JS_SHA512_NO_NODE_JS&&Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),!h||!s.JS_SHA512_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(t){return"object"==typeof t&&t.buffer&&t.buffer.constructor===ArrayBuffer});var v=function(t,e){return function(r){return new A(e,!0).update(r)[t]()}},b=function(t){var e=v("hex",t);e.create=function(){return new A(t)},e.update=function(t){return e.create().update(t)};for(var r=0;r<y.length;++r){var n=y[r];e[n]=v(n,t)}return e},w=function(t,e){return function(r,n){return new _(r,e,!0).update(n)[t]()}},m=function(t){var e=w("hex",t);e.create=function(e){return new _(e,t)},e.update=function(t,r){return e.create(t).update(r)};for(var r=0;r<y.length;++r){var n=y[r];e[n]=w(n,t)}return e};function A(t,e){e?(g[0]=g[1]=g[2]=g[3]=g[4]=g[5]=g[6]=g[7]=g[8]=g[9]=g[10]=g[11]=g[12]=g[13]=g[14]=g[15]=g[16]=g[17]=g[18]=g[19]=g[20]=g[21]=g[22]=g[23]=g[24]=g[25]=g[26]=g[27]=g[28]=g[29]=g[30]=g[31]=g[32]=0,this.blocks=g):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],384==t?(this.h0h=3418070365,this.h0l=3238371032,this.h1h=1654270250,this.h1l=914150663,this.h2h=2438529370,this.h2l=812702999,this.h3h=355462360,this.h3l=4144912697,this.h4h=1731405415,this.h4l=4290775857,this.h5h=2394180231,this.h5l=1750603025,this.h6h=3675008525,this.h6l=1694076839,this.h7h=1203062813,this.h7l=3204075428):256==t?(this.h0h=573645204,this.h0l=4230739756,this.h1h=2673172387,this.h1l=3360449730,this.h2h=596883563,this.h2l=1867755857,this.h3h=2520282905,this.h3l=1497426621,this.h4h=2519219938,this.h4l=2827943907,this.h5h=3193839141,this.h5l=1401305490,this.h6h=721525244,this.h6l=746961066,this.h7h=246885852,this.h7l=2177182882):224==t?(this.h0h=2352822216,this.h0l=424955298,this.h1h=1944164710,this.h1l=2312950998,this.h2h=502970286,this.h2l=855612546,this.h3h=1738396948,this.h3l=1479516111,this.h4h=258812777,this.h4l=2077511080,this.h5h=2011393907,this.h5l=79989058,this.h6h=1067287976,this.h6l=1780299464,this.h7h=286451373,this.h7l=2446758561):(this.h0h=1779033703,this.h0l=4089235720,this.h1h=3144134277,this.h1l=2227873595,this.h2h=1013904242,this.h2l=4271175723,this.h3h=2773480762,this.h3l=1595750129,this.h4h=1359893119,this.h4l=2917565137,this.h5h=2600822924,this.h5l=725511199,this.h6h=528734635,this.h6l=4215389547,this.h7h=1541459225,this.h7l=327033209),this.bits=t,this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1}function _(t,r,n){var i,o=typeof t;if("string"!==o){if("object"!==o)throw new Error(e);if(null===t)throw new Error(e);if(h&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||h&&ArrayBuffer.isView(t)))throw new Error(e);i=!0}var s=t.length;if(!i){for(var a,u=[],f=(s=t.length,0),c=0;c<s;++c)(a=t.charCodeAt(c))<128?u[f++]=a:a<2048?(u[f++]=192|a>>6,u[f++]=128|63&a):a<55296||a>=57344?(u[f++]=224|a>>12,u[f++]=128|a>>6&63,u[f++]=128|63&a):(a=65536+((1023&a)<<10|1023&t.charCodeAt(++c)),u[f++]=240|a>>18,u[f++]=128|a>>12&63,u[f++]=128|a>>6&63,u[f++]=128|63&a);t=u}t.length>128&&(t=new A(r,!0).update(t).array());var l=[],p=[];for(c=0;c<128;++c){var d=t[c]||0;l[c]=92^d,p[c]=54^d}A.call(this,r,n),this.update(p),this.oKeyPad=l,this.inner=!0,this.sharedMemory=n}A.prototype.update=function(t){if(this.finalized)throw new Error("finalize already called");var r,n=typeof t;if("string"!==n){if("object"!==n)throw new Error(e);if(null===t)throw new Error(e);if(h&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||h&&ArrayBuffer.isView(t)))throw new Error(e);r=!0}for(var i,o,s=0,a=t.length,u=this.blocks;s<a;){if(this.hashed&&(this.hashed=!1,u[0]=this.block,u[1]=u[2]=u[3]=u[4]=u[5]=u[6]=u[7]=u[8]=u[9]=u[10]=u[11]=u[12]=u[13]=u[14]=u[15]=u[16]=u[17]=u[18]=u[19]=u[20]=u[21]=u[22]=u[23]=u[24]=u[25]=u[26]=u[27]=u[28]=u[29]=u[30]=u[31]=u[32]=0),r)for(o=this.start;s<a&&o<128;++s)u[o>>2]|=t[s]<<p[3&o++];else for(o=this.start;s<a&&o<128;++s)(i=t.charCodeAt(s))<128?u[o>>2]|=i<<p[3&o++]:i<2048?(u[o>>2]|=(192|i>>6)<<p[3&o++],u[o>>2]|=(128|63&i)<<p[3&o++]):i<55296||i>=57344?(u[o>>2]|=(224|i>>12)<<p[3&o++],u[o>>2]|=(128|i>>6&63)<<p[3&o++],u[o>>2]|=(128|63&i)<<p[3&o++]):(i=65536+((1023&i)<<10|1023&t.charCodeAt(++s)),u[o>>2]|=(240|i>>18)<<p[3&o++],u[o>>2]|=(128|i>>12&63)<<p[3&o++],u[o>>2]|=(128|i>>6&63)<<p[3&o++],u[o>>2]|=(128|63&i)<<p[3&o++]);this.lastByteIndex=o,this.bytes+=o-this.start,o>=128?(this.block=u[32],this.start=o-128,this.hash(),this.hashed=!0):this.start=o}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this},A.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,e=this.lastByteIndex;t[32]=this.block,t[e>>2]|=l[3&e],this.block=t[32],e>=112&&(this.hashed||this.hash(),t[0]=this.block,t[1]=t[2]=t[3]=t[4]=t[5]=t[6]=t[7]=t[8]=t[9]=t[10]=t[11]=t[12]=t[13]=t[14]=t[15]=t[16]=t[17]=t[18]=t[19]=t[20]=t[21]=t[22]=t[23]=t[24]=t[25]=t[26]=t[27]=t[28]=t[29]=t[30]=t[31]=t[32]=0),t[30]=this.hBytes<<3|this.bytes>>>29,t[31]=this.bytes<<3,this.hash()}},A.prototype.hash=function(){var t,e,r,n,i,o,s,a,u,f,h,c,l,p,y,g,v,b,w,m,A,_,E,B,x,U=this.h0h,S=this.h0l,O=this.h1h,k=this.h1l,T=this.h2h,I=this.h2l,C=this.h3h,L=this.h3l,R=this.h4h,j=this.h4l,N=this.h5h,M=this.h5l,P=this.h6h,H=this.h6l,F=this.h7h,$=this.h7l,z=this.blocks;for(t=32;t<160;t+=2)e=((m=z[t-30])>>>1|(A=z[t-29])<<31)^(m>>>8|A<<24)^m>>>7,r=(A>>>1|m<<31)^(A>>>8|m<<24)^(A>>>7|m<<25),n=((m=z[t-4])>>>19|(A=z[t-3])<<13)^(A>>>29|m<<3)^m>>>6,i=(A>>>19|m<<13)^(m>>>29|A<<3)^(A>>>6|m<<26),m=z[t-32],A=z[t-31],u=((_=z[t-14])>>>16)+(m>>>16)+(e>>>16)+(n>>>16)+((a=(65535&_)+(65535&m)+(65535&e)+(65535&n)+((s=((E=z[t-13])>>>16)+(A>>>16)+(r>>>16)+(i>>>16)+((o=(65535&E)+(65535&A)+(65535&r)+(65535&i))>>>16))>>>16))>>>16),z[t]=u<<16|65535&a,z[t+1]=s<<16|65535&o;var V=U,D=S,Y=O,W=k,q=T,Z=I,J=C,X=L,G=R,K=j,Q=N,tt=M,et=P,rt=H,nt=F,it=$;for(g=Y&q,v=W&Z,t=0;t<160;t+=8)e=(V>>>28|D<<4)^(D>>>2|V<<30)^(D>>>7|V<<25),r=(D>>>28|V<<4)^(V>>>2|D<<30)^(V>>>7|D<<25),n=(G>>>14|K<<18)^(G>>>18|K<<14)^(K>>>9|G<<23),i=(K>>>14|G<<18)^(K>>>18|G<<14)^(G>>>9|K<<23),b=(f=V&Y)^V&q^g,w=(h=D&W)^D&Z^v,B=G&Q^~G&et,x=K&tt^~K&rt,m=z[t],A=z[t+1],m=(u=((_=d[t])>>>16)+(m>>>16)+(B>>>16)+(n>>>16)+(nt>>>16)+((a=(65535&_)+(65535&m)+(65535&B)+(65535&n)+(65535&nt)+((s=((E=d[t+1])>>>16)+(A>>>16)+(x>>>16)+(i>>>16)+(it>>>16)+((o=(65535&E)+(65535&A)+(65535&x)+(65535&i)+(65535&it))>>>16))>>>16))>>>16))<<16|65535&a,A=s<<16|65535&o,_=(u=(b>>>16)+(e>>>16)+((a=(65535&b)+(65535&e)+((s=(w>>>16)+(r>>>16)+((o=(65535&w)+(65535&r))>>>16))>>>16))>>>16))<<16|65535&a,E=s<<16|65535&o,nt=(u=(J>>>16)+(m>>>16)+((a=(65535&J)+(65535&m)+((s=(X>>>16)+(A>>>16)+((o=(65535&X)+(65535&A))>>>16))>>>16))>>>16))<<16|65535&a,it=s<<16|65535&o,e=((J=(u=(_>>>16)+(m>>>16)+((a=(65535&_)+(65535&m)+((s=(E>>>16)+(A>>>16)+((o=(65535&E)+(65535&A))>>>16))>>>16))>>>16))<<16|65535&a)>>>28|(X=s<<16|65535&o)<<4)^(X>>>2|J<<30)^(X>>>7|J<<25),r=(X>>>28|J<<4)^(J>>>2|X<<30)^(J>>>7|X<<25),n=(nt>>>14|it<<18)^(nt>>>18|it<<14)^(it>>>9|nt<<23),i=(it>>>14|nt<<18)^(it>>>18|nt<<14)^(nt>>>9|it<<23),b=(c=J&V)^J&Y^f,w=(l=X&D)^X&W^h,B=nt&G^~nt&Q,x=it&K^~it&tt,m=z[t+2],A=z[t+3],m=(u=((_=d[t+2])>>>16)+(m>>>16)+(B>>>16)+(n>>>16)+(et>>>16)+((a=(65535&_)+(65535&m)+(65535&B)+(65535&n)+(65535&et)+((s=((E=d[t+3])>>>16)+(A>>>16)+(x>>>16)+(i>>>16)+(rt>>>16)+((o=(65535&E)+(65535&A)+(65535&x)+(65535&i)+(65535&rt))>>>16))>>>16))>>>16))<<16|65535&a,A=s<<16|65535&o,_=(u=(b>>>16)+(e>>>16)+((a=(65535&b)+(65535&e)+((s=(w>>>16)+(r>>>16)+((o=(65535&w)+(65535&r))>>>16))>>>16))>>>16))<<16|65535&a,E=s<<16|65535&o,et=(u=(q>>>16)+(m>>>16)+((a=(65535&q)+(65535&m)+((s=(Z>>>16)+(A>>>16)+((o=(65535&Z)+(65535&A))>>>16))>>>16))>>>16))<<16|65535&a,rt=s<<16|65535&o,e=((q=(u=(_>>>16)+(m>>>16)+((a=(65535&_)+(65535&m)+((s=(E>>>16)+(A>>>16)+((o=(65535&E)+(65535&A))>>>16))>>>16))>>>16))<<16|65535&a)>>>28|(Z=s<<16|65535&o)<<4)^(Z>>>2|q<<30)^(Z>>>7|q<<25),r=(Z>>>28|q<<4)^(q>>>2|Z<<30)^(q>>>7|Z<<25),n=(et>>>14|rt<<18)^(et>>>18|rt<<14)^(rt>>>9|et<<23),i=(rt>>>14|et<<18)^(rt>>>18|et<<14)^(et>>>9|rt<<23),b=(p=q&J)^q&V^c,w=(y=Z&X)^Z&D^l,B=et&nt^~et&G,x=rt&it^~rt&K,m=z[t+4],A=z[t+5],m=(u=((_=d[t+4])>>>16)+(m>>>16)+(B>>>16)+(n>>>16)+(Q>>>16)+((a=(65535&_)+(65535&m)+(65535&B)+(65535&n)+(65535&Q)+((s=((E=d[t+5])>>>16)+(A>>>16)+(x>>>16)+(i>>>16)+(tt>>>16)+((o=(65535&E)+(65535&A)+(65535&x)+(65535&i)+(65535&tt))>>>16))>>>16))>>>16))<<16|65535&a,A=s<<16|65535&o,_=(u=(b>>>16)+(e>>>16)+((a=(65535&b)+(65535&e)+((s=(w>>>16)+(r>>>16)+((o=(65535&w)+(65535&r))>>>16))>>>16))>>>16))<<16|65535&a,E=s<<16|65535&o,Q=(u=(Y>>>16)+(m>>>16)+((a=(65535&Y)+(65535&m)+((s=(W>>>16)+(A>>>16)+((o=(65535&W)+(65535&A))>>>16))>>>16))>>>16))<<16|65535&a,tt=s<<16|65535&o,e=((Y=(u=(_>>>16)+(m>>>16)+((a=(65535&_)+(65535&m)+((s=(E>>>16)+(A>>>16)+((o=(65535&E)+(65535&A))>>>16))>>>16))>>>16))<<16|65535&a)>>>28|(W=s<<16|65535&o)<<4)^(W>>>2|Y<<30)^(W>>>7|Y<<25),r=(W>>>28|Y<<4)^(Y>>>2|W<<30)^(Y>>>7|W<<25),n=(Q>>>14|tt<<18)^(Q>>>18|tt<<14)^(tt>>>9|Q<<23),i=(tt>>>14|Q<<18)^(tt>>>18|Q<<14)^(Q>>>9|tt<<23),b=(g=Y&q)^Y&J^p,w=(v=W&Z)^W&X^y,B=Q&et^~Q&nt,x=tt&rt^~tt&it,m=z[t+6],A=z[t+7],m=(u=((_=d[t+6])>>>16)+(m>>>16)+(B>>>16)+(n>>>16)+(G>>>16)+((a=(65535&_)+(65535&m)+(65535&B)+(65535&n)+(65535&G)+((s=((E=d[t+7])>>>16)+(A>>>16)+(x>>>16)+(i>>>16)+(K>>>16)+((o=(65535&E)+(65535&A)+(65535&x)+(65535&i)+(65535&K))>>>16))>>>16))>>>16))<<16|65535&a,A=s<<16|65535&o,_=(u=(b>>>16)+(e>>>16)+((a=(65535&b)+(65535&e)+((s=(w>>>16)+(r>>>16)+((o=(65535&w)+(65535&r))>>>16))>>>16))>>>16))<<16|65535&a,E=s<<16|65535&o,G=(u=(V>>>16)+(m>>>16)+((a=(65535&V)+(65535&m)+((s=(D>>>16)+(A>>>16)+((o=(65535&D)+(65535&A))>>>16))>>>16))>>>16))<<16|65535&a,K=s<<16|65535&o,V=(u=(_>>>16)+(m>>>16)+((a=(65535&_)+(65535&m)+((s=(E>>>16)+(A>>>16)+((o=(65535&E)+(65535&A))>>>16))>>>16))>>>16))<<16|65535&a,D=s<<16|65535&o;u=(U>>>16)+(V>>>16)+((a=(65535&U)+(65535&V)+((s=(S>>>16)+(D>>>16)+((o=(65535&S)+(65535&D))>>>16))>>>16))>>>16),this.h0h=u<<16|65535&a,this.h0l=s<<16|65535&o,u=(O>>>16)+(Y>>>16)+((a=(65535&O)+(65535&Y)+((s=(k>>>16)+(W>>>16)+((o=(65535&k)+(65535&W))>>>16))>>>16))>>>16),this.h1h=u<<16|65535&a,this.h1l=s<<16|65535&o,u=(T>>>16)+(q>>>16)+((a=(65535&T)+(65535&q)+((s=(I>>>16)+(Z>>>16)+((o=(65535&I)+(65535&Z))>>>16))>>>16))>>>16),this.h2h=u<<16|65535&a,this.h2l=s<<16|65535&o,u=(C>>>16)+(J>>>16)+((a=(65535&C)+(65535&J)+((s=(L>>>16)+(X>>>16)+((o=(65535&L)+(65535&X))>>>16))>>>16))>>>16),this.h3h=u<<16|65535&a,this.h3l=s<<16|65535&o,u=(R>>>16)+(G>>>16)+((a=(65535&R)+(65535&G)+((s=(j>>>16)+(K>>>16)+((o=(65535&j)+(65535&K))>>>16))>>>16))>>>16),this.h4h=u<<16|65535&a,this.h4l=s<<16|65535&o,u=(N>>>16)+(Q>>>16)+((a=(65535&N)+(65535&Q)+((s=(M>>>16)+(tt>>>16)+((o=(65535&M)+(65535&tt))>>>16))>>>16))>>>16),this.h5h=u<<16|65535&a,this.h5l=s<<16|65535&o,u=(P>>>16)+(et>>>16)+((a=(65535&P)+(65535&et)+((s=(H>>>16)+(rt>>>16)+((o=(65535&H)+(65535&rt))>>>16))>>>16))>>>16),this.h6h=u<<16|65535&a,this.h6l=s<<16|65535&o,u=(F>>>16)+(nt>>>16)+((a=(65535&F)+(65535&nt)+((s=($>>>16)+(it>>>16)+((o=(65535&$)+(65535&it))>>>16))>>>16))>>>16),this.h7h=u<<16|65535&a,this.h7l=s<<16|65535&o},A.prototype.hex=function(){this.finalize();var t=this.h0h,e=this.h0l,r=this.h1h,n=this.h1l,i=this.h2h,o=this.h2l,s=this.h3h,a=this.h3l,u=this.h4h,f=this.h4l,h=this.h5h,l=this.h5l,p=this.h6h,d=this.h6l,y=this.h7h,g=this.h7l,v=this.bits,b=c[t>>28&15]+c[t>>24&15]+c[t>>20&15]+c[t>>16&15]+c[t>>12&15]+c[t>>8&15]+c[t>>4&15]+c[15&t]+c[e>>28&15]+c[e>>24&15]+c[e>>20&15]+c[e>>16&15]+c[e>>12&15]+c[e>>8&15]+c[e>>4&15]+c[15&e]+c[r>>28&15]+c[r>>24&15]+c[r>>20&15]+c[r>>16&15]+c[r>>12&15]+c[r>>8&15]+c[r>>4&15]+c[15&r]+c[n>>28&15]+c[n>>24&15]+c[n>>20&15]+c[n>>16&15]+c[n>>12&15]+c[n>>8&15]+c[n>>4&15]+c[15&n]+c[i>>28&15]+c[i>>24&15]+c[i>>20&15]+c[i>>16&15]+c[i>>12&15]+c[i>>8&15]+c[i>>4&15]+c[15&i]+c[o>>28&15]+c[o>>24&15]+c[o>>20&15]+c[o>>16&15]+c[o>>12&15]+c[o>>8&15]+c[o>>4&15]+c[15&o]+c[s>>28&15]+c[s>>24&15]+c[s>>20&15]+c[s>>16&15]+c[s>>12&15]+c[s>>8&15]+c[s>>4&15]+c[15&s];return v>=256&&(b+=c[a>>28&15]+c[a>>24&15]+c[a>>20&15]+c[a>>16&15]+c[a>>12&15]+c[a>>8&15]+c[a>>4&15]+c[15&a]),v>=384&&(b+=c[u>>28&15]+c[u>>24&15]+c[u>>20&15]+c[u>>16&15]+c[u>>12&15]+c[u>>8&15]+c[u>>4&15]+c[15&u]+c[f>>28&15]+c[f>>24&15]+c[f>>20&15]+c[f>>16&15]+c[f>>12&15]+c[f>>8&15]+c[f>>4&15]+c[15&f]+c[h>>28&15]+c[h>>24&15]+c[h>>20&15]+c[h>>16&15]+c[h>>12&15]+c[h>>8&15]+c[h>>4&15]+c[15&h]+c[l>>28&15]+c[l>>24&15]+c[l>>20&15]+c[l>>16&15]+c[l>>12&15]+c[l>>8&15]+c[l>>4&15]+c[15&l]),512==v&&(b+=c[p>>28&15]+c[p>>24&15]+c[p>>20&15]+c[p>>16&15]+c[p>>12&15]+c[p>>8&15]+c[p>>4&15]+c[15&p]+c[d>>28&15]+c[d>>24&15]+c[d>>20&15]+c[d>>16&15]+c[d>>12&15]+c[d>>8&15]+c[d>>4&15]+c[15&d]+c[y>>28&15]+c[y>>24&15]+c[y>>20&15]+c[y>>16&15]+c[y>>12&15]+c[y>>8&15]+c[y>>4&15]+c[15&y]+c[g>>28&15]+c[g>>24&15]+c[g>>20&15]+c[g>>16&15]+c[g>>12&15]+c[g>>8&15]+c[g>>4&15]+c[15&g]),b},A.prototype.toString=A.prototype.hex,A.prototype.digest=function(){this.finalize();var t=this.h0h,e=this.h0l,r=this.h1h,n=this.h1l,i=this.h2h,o=this.h2l,s=this.h3h,a=this.h3l,u=this.h4h,f=this.h4l,h=this.h5h,c=this.h5l,l=this.h6h,p=this.h6l,d=this.h7h,y=this.h7l,g=this.bits,v=[t>>24&255,t>>16&255,t>>8&255,255&t,e>>24&255,e>>16&255,e>>8&255,255&e,r>>24&255,r>>16&255,r>>8&255,255&r,n>>24&255,n>>16&255,n>>8&255,255&n,i>>24&255,i>>16&255,i>>8&255,255&i,o>>24&255,o>>16&255,o>>8&255,255&o,s>>24&255,s>>16&255,s>>8&255,255&s];return g>=256&&v.push(a>>24&255,a>>16&255,a>>8&255,255&a),g>=384&&v.push(u>>24&255,u>>16&255,u>>8&255,255&u,f>>24&255,f>>16&255,f>>8&255,255&f,h>>24&255,h>>16&255,h>>8&255,255&h,c>>24&255,c>>16&255,c>>8&255,255&c),512==g&&v.push(l>>24&255,l>>16&255,l>>8&255,255&l,p>>24&255,p>>16&255,p>>8&255,255&p,d>>24&255,d>>16&255,d>>8&255,255&d,y>>24&255,y>>16&255,y>>8&255,255&y),v},A.prototype.array=A.prototype.digest,A.prototype.arrayBuffer=function(){this.finalize();var t=this.bits,e=new ArrayBuffer(t/8),r=new DataView(e);return r.setUint32(0,this.h0h),r.setUint32(4,this.h0l),r.setUint32(8,this.h1h),r.setUint32(12,this.h1l),r.setUint32(16,this.h2h),r.setUint32(20,this.h2l),r.setUint32(24,this.h3h),t>=256&&r.setUint32(28,this.h3l),t>=384&&(r.setUint32(32,this.h4h),r.setUint32(36,this.h4l),r.setUint32(40,this.h5h),r.setUint32(44,this.h5l)),512==t&&(r.setUint32(48,this.h6h),r.setUint32(52,this.h6l),r.setUint32(56,this.h7h),r.setUint32(60,this.h7l)),e},A.prototype.clone=function(){var t=new A(this.bits,!1);return this.copyTo(t),t},A.prototype.copyTo=function(t){var e=0,r=["h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","start","bytes","hBytes","finalized","hashed","lastByteIndex"];for(e=0;e<r.length;++e)t[r[e]]=this[r[e]];for(e=0;e<this.blocks.length;++e)t.blocks[e]=this.blocks[e]},_.prototype=new A,_.prototype.finalize=function(){if(A.prototype.finalize.call(this),this.inner){this.inner=!1;var t=this.array();A.call(this,this.bits,this.sharedMemory),this.update(this.oKeyPad),this.update(t),A.prototype.finalize.call(this)}},_.prototype.clone=function(){var t=new _([],this.bits,!1);this.copyTo(t),t.inner=this.inner;for(var e=0;e<this.oKeyPad.length;++e)t.oKeyPad[e]=this.oKeyPad[e];return t};var E=b(512);E.sha512=E,E.sha384=b(384),E.sha512_256=b(256),E.sha512_224=b(224),E.sha512.hmac=m(512),E.sha384.hmac=m(384),E.sha512_256.hmac=m(256),E.sha512_224.hmac=m(224),u?t.exports=E:(s.sha512=E.sha512,s.sha384=E.sha384,s.sha512_256=E.sha512_256,s.sha512_224=E.sha512_224,f&&(void 0===(n=function(){return E}.call(E,r,E,t))||(t.exports=n)))}()},5362:function(t,e,r){"use strict";var n;!function(i){function o(t,e,r){var n,i,o,s,a,y,g,v,b,w=0,m=[],A=0,_=!1,E=[],B=[],x=!1,U=!1,S=-1;if(n=(r=r||{}).encoding||"UTF8",(b=r.numRounds||1)!==parseInt(b,10)||1>b)throw Error("numRounds must a integer >= 1");if("SHA-1"===t)a=512,y=F,g=$,s=160,v=function(t){return t.slice()};else if(0===t.lastIndexOf("SHA-",0))if(y=function(e,r){return z(e,r,t)},g=function(e,r,n,i){var o,s;if("SHA-224"===t||"SHA-256"===t)o=15+(r+65>>>9<<4),s=16;else{if("SHA-384"!==t&&"SHA-512"!==t)throw Error("Unexpected error in SHA-2 implementation");o=31+(r+129>>>10<<5),s=32}for(;e.length<=o;)e.push(0);for(e[r>>>5]|=128<<24-r%32,r+=n,e[o]=4294967295&r,e[o-1]=r/4294967296|0,n=e.length,r=0;r<n;r+=s)i=z(e.slice(r,r+s),i,t);if("SHA-224"===t)e=[i[0],i[1],i[2],i[3],i[4],i[5],i[6]];else if("SHA-256"===t)e=i;else if("SHA-384"===t)e=[i[0].a,i[0].b,i[1].a,i[1].b,i[2].a,i[2].b,i[3].a,i[3].b,i[4].a,i[4].b,i[5].a,i[5].b];else{if("SHA-512"!==t)throw Error("Unexpected error in SHA-2 implementation");e=[i[0].a,i[0].b,i[1].a,i[1].b,i[2].a,i[2].b,i[3].a,i[3].b,i[4].a,i[4].b,i[5].a,i[5].b,i[6].a,i[6].b,i[7].a,i[7].b]}return e},v=function(t){return t.slice()},"SHA-224"===t)a=512,s=224;else if("SHA-256"===t)a=512,s=256;else if("SHA-384"===t)a=1024,s=384;else{if("SHA-512"!==t)throw Error("Chosen SHA variant is not supported");a=1024,s=512}else{if(0!==t.lastIndexOf("SHA3-",0)&&0!==t.lastIndexOf("SHAKE",0))throw Error("Chosen SHA variant is not supported");var O=6;if(y=V,v=function(t){var e,r=[];for(e=0;5>e;e+=1)r[e]=t[e].slice();return r},S=1,"SHA3-224"===t)a=1152,s=224;else if("SHA3-256"===t)a=1088,s=256;else if("SHA3-384"===t)a=832,s=384;else if("SHA3-512"===t)a=576,s=512;else if("SHAKE128"===t)a=1344,s=-1,O=31,U=!0;else{if("SHAKE256"!==t)throw Error("Chosen SHA variant is not supported");a=1088,s=-1,O=31,U=!0}g=function(t,e,r,n,i){var o,s=O,u=[],f=(r=a)>>>5,h=0,c=e>>>5;for(o=0;o<c&&e>=r;o+=f)n=V(t.slice(o,o+f),n),e-=r;for(t=t.slice(o),e%=r;t.length<f;)t.push(0);for(t[(o=e>>>3)>>2]^=s<<o%4*8,t[f-1]^=2147483648,n=V(t,n);32*u.length<i&&(t=n[h%5][h/5|0],u.push(t.b),!(32*u.length>=i));)u.push(t.a),0==64*(h+=1)%r&&(V(null,n),h=0);return u}}o=d(e,n,S),i=H(t),this.setHMACKey=function(e,r,o){var u;if(!0===_)throw Error("HMAC key already set");if(!0===x)throw Error("Cannot set HMAC key after calling update");if(!0===U)throw Error("SHAKE is not supported for HMAC");for(e=(r=d(r,n=(o||{}).encoding||"UTF8",S)(e)).binLen,r=r.value,o=(u=a>>>3)/4-1,u<e/8&&(r=g(r,e,0,H(t),s));r.length<=o;)r.push(0);for(e=0;e<=o;e+=1)E[e]=909522486^r[e],B[e]=1549556828^r[e];i=y(E,i),w=a,_=!0},this.update=function(t){var e,r,n,s=0,u=a>>>5;for(t=(e=o(t,m,A)).binLen,r=e.value,e=t>>>5,n=0;n<e;n+=u)s+a<=t&&(i=y(r.slice(n,n+u),i),s+=a);w+=s,m=r.slice(s>>>5),A=t%a,x=!0},this.getHash=function(e,r){var n,o,a,d;if(!0===_)throw Error("Cannot call getHash after setting HMAC key");if(a=p(r),!0===U){if(-1===a.shakeLen)throw Error("shakeLen must be specified in options");s=a.shakeLen}switch(e){case"HEX":n=function(t){return u(t,s,S,a)};break;case"B64":n=function(t){return f(t,s,S,a)};break;case"BYTES":n=function(t){return h(t,s,S)};break;case"ARRAYBUFFER":try{o=new ArrayBuffer(0)}catch(t){throw Error("ARRAYBUFFER not supported by this environment")}n=function(t){return c(t,s,S)};break;case"UINT8ARRAY":try{o=new Uint8Array(0)}catch(t){throw Error("UINT8ARRAY not supported by this environment")}n=function(t){return l(t,s,S)};break;default:throw Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}for(d=g(m.slice(),A,w,v(i),s),o=1;o<b;o+=1)!0===U&&0!=s%32&&(d[d.length-1]&=16777215>>>24-s%32),d=g(d,s,0,H(t),s);return n(d)},this.getHMAC=function(e,r){var n,o,d,b;if(!1===_)throw Error("Cannot call getHMAC without first setting HMAC key");switch(d=p(r),e){case"HEX":n=function(t){return u(t,s,S,d)};break;case"B64":n=function(t){return f(t,s,S,d)};break;case"BYTES":n=function(t){return h(t,s,S)};break;case"ARRAYBUFFER":try{n=new ArrayBuffer(0)}catch(t){throw Error("ARRAYBUFFER not supported by this environment")}n=function(t){return c(t,s,S)};break;case"UINT8ARRAY":try{n=new Uint8Array(0)}catch(t){throw Error("UINT8ARRAY not supported by this environment")}n=function(t){return l(t,s,S)};break;default:throw Error("outputFormat must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}return o=g(m.slice(),A,w,v(i),s),b=y(B,H(t)),n(b=g(o,s,a,b,s))}}function s(t,e){this.a=t,this.b=e}function a(t,e,r,n){var i,o,s,a,u;for(e=e||[0],o=(r=r||0)>>>3,u=-1===n?3:0,i=0;i<t.length;i+=1)s=(a=i+o)>>>2,e.length<=s&&e.push(0),e[s]|=t[i]<<8*(u+a%4*n);return{value:e,binLen:8*t.length+r}}function u(t,e,r,n){var i,o,s,a="";for(e/=8,s=-1===r?3:0,i=0;i<e;i+=1)o=t[i>>>2]>>>8*(s+i%4*r),a+="0123456789abcdef".charAt(o>>>4&15)+"0123456789abcdef".charAt(15&o);return n.outputUpper?a.toUpperCase():a}function f(t,e,r,n){var i,o,s,a,u="",f=e/8;for(a=-1===r?3:0,i=0;i<f;i+=3)for(o=i+1<f?t[i+1>>>2]:0,s=i+2<f?t[i+2>>>2]:0,s=(t[i>>>2]>>>8*(a+i%4*r)&255)<<16|(o>>>8*(a+(i+1)%4*r)&255)<<8|s>>>8*(a+(i+2)%4*r)&255,o=0;4>o;o+=1)u+=8*i+6*o<=e?"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(s>>>6*(3-o)&63):n.b64Pad;return u}function h(t,e,r){var n,i,o,s="";for(e/=8,o=-1===r?3:0,n=0;n<e;n+=1)i=t[n>>>2]>>>8*(o+n%4*r)&255,s+=String.fromCharCode(i);return s}function c(t,e,r){e/=8;var n,i,o,s=new ArrayBuffer(e);for(o=new Uint8Array(s),i=-1===r?3:0,n=0;n<e;n+=1)o[n]=t[n>>>2]>>>8*(i+n%4*r)&255;return s}function l(t,e,r){e/=8;var n,i,o=new Uint8Array(e);for(i=-1===r?3:0,n=0;n<e;n+=1)o[n]=t[n>>>2]>>>8*(i+n%4*r)&255;return o}function p(t){var e={outputUpper:!1,b64Pad:"=",shakeLen:-1};if(t=t||{},e.outputUpper=t.outputUpper||!1,!0===t.hasOwnProperty("b64Pad")&&(e.b64Pad=t.b64Pad),!0===t.hasOwnProperty("shakeLen")){if(0!=t.shakeLen%8)throw Error("shakeLen must be a multiple of 8");e.shakeLen=t.shakeLen}if("boolean"!=typeof e.outputUpper)throw Error("Invalid outputUpper formatting option");if("string"!=typeof e.b64Pad)throw Error("Invalid b64Pad formatting option");return e}function d(t,e,r){switch(e){case"UTF8":case"UTF16BE":case"UTF16LE":break;default:throw Error("encoding must be UTF8, UTF16BE, or UTF16LE")}switch(t){case"HEX":t=function(t,e,n){var i,o,s,a,u,f,h=t.length;if(0!=h%2)throw Error("String of HEX type must be in byte increments");for(e=e||[0],u=(n=n||0)>>>3,f=-1===r?3:0,i=0;i<h;i+=2){if(o=parseInt(t.substr(i,2),16),isNaN(o))throw Error("String of HEX type contains invalid characters");for(s=(a=(i>>>1)+u)>>>2;e.length<=s;)e.push(0);e[s]|=o<<8*(f+a%4*r)}return{value:e,binLen:4*h+n}};break;case"TEXT":t=function(t,n,i){var o,s,a,u,f,h,c,l,p=0;if(n=n||[0],f=(i=i||0)>>>3,"UTF8"===e)for(l=-1===r?3:0,a=0;a<t.length;a+=1)for(s=[],128>(o=t.charCodeAt(a))?s.push(o):2048>o?(s.push(192|o>>>6),s.push(128|63&o)):55296>o||57344<=o?s.push(224|o>>>12,128|o>>>6&63,128|63&o):(a+=1,o=65536+((1023&o)<<10|1023&t.charCodeAt(a)),s.push(240|o>>>18,128|o>>>12&63,128|o>>>6&63,128|63&o)),u=0;u<s.length;u+=1){for(h=(c=p+f)>>>2;n.length<=h;)n.push(0);n[h]|=s[u]<<8*(l+c%4*r),p+=1}else if("UTF16BE"===e||"UTF16LE"===e)for(l=-1===r?2:0,s="UTF16LE"===e&&1!==r||"UTF16LE"!==e&&1===r,a=0;a<t.length;a+=1){for(o=t.charCodeAt(a),!0===s&&(o=(u=255&o)<<8|o>>>8),h=(c=p+f)>>>2;n.length<=h;)n.push(0);n[h]|=o<<8*(l+c%4*r),p+=2}return{value:n,binLen:8*p+i}};break;case"B64":t=function(t,e,n){var i,o,s,a,u,f,h,c,l=0;if(-1===t.search(/^[a-zA-Z0-9=+\/]+$/))throw Error("Invalid character in base-64 string");if(o=t.indexOf("="),t=t.replace(/\=/g,""),-1!==o&&o<t.length)throw Error("Invalid '=' found in base-64 string");for(e=e||[0],f=(n=n||0)>>>3,c=-1===r?3:0,o=0;o<t.length;o+=4){for(u=t.substr(o,4),s=a=0;s<u.length;s+=1)a|=(i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(u.charAt(s)))<<18-6*s;for(s=0;s<u.length-1;s+=1){for(i=(h=l+f)>>>2;e.length<=i;)e.push(0);e[i]|=(a>>>16-8*s&255)<<8*(c+h%4*r),l+=1}}return{value:e,binLen:8*l+n}};break;case"BYTES":t=function(t,e,n){var i,o,s,a,u,f;for(e=e||[0],s=(n=n||0)>>>3,f=-1===r?3:0,o=0;o<t.length;o+=1)i=t.charCodeAt(o),a=(u=o+s)>>>2,e.length<=a&&e.push(0),e[a]|=i<<8*(f+u%4*r);return{value:e,binLen:8*t.length+n}};break;case"ARRAYBUFFER":try{t=new ArrayBuffer(0)}catch(t){throw Error("ARRAYBUFFER not supported by this environment")}t=function(t,e,n){return a(new Uint8Array(t),e,n,r)};break;case"UINT8ARRAY":try{t=new Uint8Array(0)}catch(t){throw Error("UINT8ARRAY not supported by this environment")}t=function(t,e,n){return a(t,e,n,r)};break;default:throw Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}return t}function y(t,e){return t<<e|t>>>32-e}function g(t,e){return 32<e?(e-=32,new s(t.b<<e|t.a>>>32-e,t.a<<e|t.b>>>32-e)):0!==e?new s(t.a<<e|t.b>>>32-e,t.b<<e|t.a>>>32-e):t}function v(t,e){return t>>>e|t<<32-e}function b(t,e){var r;return r=new s(t.a,t.b),32>=e?new s(r.a>>>e|r.b<<32-e&4294967295,r.b>>>e|r.a<<32-e&4294967295):new s(r.b>>>e-32|r.a<<64-e&4294967295,r.a>>>e-32|r.b<<64-e&4294967295)}function w(t,e){return 32>=e?new s(t.a>>>e,t.b>>>e|t.a<<32-e&4294967295):new s(0,t.a>>>e-32)}function m(t,e,r){return t&e^~t&r}function A(t,e,r){return new s(t.a&e.a^~t.a&r.a,t.b&e.b^~t.b&r.b)}function _(t,e,r){return t&e^t&r^e&r}function E(t,e,r){return new s(t.a&e.a^t.a&r.a^e.a&r.a,t.b&e.b^t.b&r.b^e.b&r.b)}function B(t){return v(t,2)^v(t,13)^v(t,22)}function x(t){var e=b(t,28),r=b(t,34);return t=b(t,39),new s(e.a^r.a^t.a,e.b^r.b^t.b)}function U(t){return v(t,6)^v(t,11)^v(t,25)}function S(t){var e=b(t,14),r=b(t,18);return t=b(t,41),new s(e.a^r.a^t.a,e.b^r.b^t.b)}function O(t){return v(t,7)^v(t,18)^t>>>3}function k(t){var e=b(t,1),r=b(t,8);return t=w(t,7),new s(e.a^r.a^t.a,e.b^r.b^t.b)}function T(t){return v(t,17)^v(t,19)^t>>>10}function I(t){var e=b(t,19),r=b(t,61);return t=w(t,6),new s(e.a^r.a^t.a,e.b^r.b^t.b)}function C(t,e){var r=(65535&t)+(65535&e);return((t>>>16)+(e>>>16)+(r>>>16)&65535)<<16|65535&r}function L(t,e,r,n){var i=(65535&t)+(65535&e)+(65535&r)+(65535&n);return((t>>>16)+(e>>>16)+(r>>>16)+(n>>>16)+(i>>>16)&65535)<<16|65535&i}function R(t,e,r,n,i){var o=(65535&t)+(65535&e)+(65535&r)+(65535&n)+(65535&i);return((t>>>16)+(e>>>16)+(r>>>16)+(n>>>16)+(i>>>16)+(o>>>16)&65535)<<16|65535&o}function j(t,e){var r,n,i;return r=(65535&t.b)+(65535&e.b),i=(65535&(n=(t.b>>>16)+(e.b>>>16)+(r>>>16)))<<16|65535&r,r=(65535&t.a)+(65535&e.a)+(n>>>16),new s((65535&(n=(t.a>>>16)+(e.a>>>16)+(r>>>16)))<<16|65535&r,i)}function N(t,e,r,n){var i,o,a;return i=(65535&t.b)+(65535&e.b)+(65535&r.b)+(65535&n.b),a=(65535&(o=(t.b>>>16)+(e.b>>>16)+(r.b>>>16)+(n.b>>>16)+(i>>>16)))<<16|65535&i,i=(65535&t.a)+(65535&e.a)+(65535&r.a)+(65535&n.a)+(o>>>16),new s((65535&(o=(t.a>>>16)+(e.a>>>16)+(r.a>>>16)+(n.a>>>16)+(i>>>16)))<<16|65535&i,a)}function M(t,e,r,n,i){var o,a,u;return o=(65535&t.b)+(65535&e.b)+(65535&r.b)+(65535&n.b)+(65535&i.b),u=(65535&(a=(t.b>>>16)+(e.b>>>16)+(r.b>>>16)+(n.b>>>16)+(i.b>>>16)+(o>>>16)))<<16|65535&o,o=(65535&t.a)+(65535&e.a)+(65535&r.a)+(65535&n.a)+(65535&i.a)+(a>>>16),new s((65535&(a=(t.a>>>16)+(e.a>>>16)+(r.a>>>16)+(n.a>>>16)+(i.a>>>16)+(o>>>16)))<<16|65535&o,u)}function P(t,e){return new s(t.a^e.a,t.b^e.b)}function H(t){var e,r=[];if("SHA-1"===t)r=[1732584193,4023233417,2562383102,271733878,3285377520];else if(0===t.lastIndexOf("SHA-",0))switch(r=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428],e=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],t){case"SHA-224":break;case"SHA-256":r=e;break;case"SHA-384":r=[new s(3418070365,r[0]),new s(1654270250,r[1]),new s(2438529370,r[2]),new s(355462360,r[3]),new s(1731405415,r[4]),new s(41048885895,r[5]),new s(3675008525,r[6]),new s(1203062813,r[7])];break;case"SHA-512":r=[new s(e[0],4089235720),new s(e[1],2227873595),new s(e[2],4271175723),new s(e[3],1595750129),new s(e[4],2917565137),new s(e[5],725511199),new s(e[6],4215389547),new s(e[7],327033209)];break;default:throw Error("Unknown SHA variant")}else{if(0!==t.lastIndexOf("SHA3-",0)&&0!==t.lastIndexOf("SHAKE",0))throw Error("No SHA variants supported");for(t=0;5>t;t+=1)r[t]=[new s(0,0),new s(0,0),new s(0,0),new s(0,0),new s(0,0)]}return r}function F(t,e){var r,n,i,o,s,a,u,f=[];for(r=e[0],n=e[1],i=e[2],o=e[3],s=e[4],u=0;80>u;u+=1)f[u]=16>u?t[u]:y(f[u-3]^f[u-8]^f[u-14]^f[u-16],1),a=20>u?R(y(r,5),n&i^~n&o,s,1518500249,f[u]):40>u?R(y(r,5),n^i^o,s,1859775393,f[u]):60>u?R(y(r,5),_(n,i,o),s,2400959708,f[u]):R(y(r,5),n^i^o,s,3395469782,f[u]),s=o,o=i,i=y(n,30),n=r,r=a;return e[0]=C(r,e[0]),e[1]=C(n,e[1]),e[2]=C(i,e[2]),e[3]=C(o,e[3]),e[4]=C(s,e[4]),e}function $(t,e,r,n){var i;for(i=15+(e+65>>>9<<4);t.length<=i;)t.push(0);for(t[e>>>5]|=128<<24-e%32,e+=r,t[i]=4294967295&e,t[i-1]=e/4294967296|0,e=t.length,i=0;i<e;i+=16)n=F(t.slice(i,i+16),n);return n}function z(t,e,r){var n,i,o,a,u,f,h,c,l,p,d,y,g,v,b,w,P,H,F,$,z,V,W,q=[];if("SHA-224"===r||"SHA-256"===r)p=64,y=1,V=Number,g=C,v=L,b=R,w=O,P=T,H=B,F=U,z=_,$=m,W=D;else{if("SHA-384"!==r&&"SHA-512"!==r)throw Error("Unexpected error in SHA-2 implementation");p=80,y=2,V=s,g=j,v=N,b=M,w=k,P=I,H=x,F=S,z=E,$=A,W=Y}for(r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],u=e[5],f=e[6],h=e[7],d=0;d<p;d+=1)16>d?(l=d*y,c=t.length<=l?0:t[l],l=t.length<=l+1?0:t[l+1],q[d]=new V(c,l)):q[d]=v(P(q[d-2]),q[d-7],w(q[d-15]),q[d-16]),c=b(h,F(a),$(a,u,f),W[d],q[d]),l=g(H(r),z(r,n,i)),h=f,f=u,u=a,a=g(o,c),o=i,i=n,n=r,r=g(c,l);return e[0]=g(r,e[0]),e[1]=g(n,e[1]),e[2]=g(i,e[2]),e[3]=g(o,e[3]),e[4]=g(a,e[4]),e[5]=g(u,e[5]),e[6]=g(f,e[6]),e[7]=g(h,e[7]),e}function V(t,e){var r,n,i,o,a=[],u=[];if(null!==t)for(n=0;n<t.length;n+=2)e[(n>>>1)%5][(n>>>1)/5|0]=P(e[(n>>>1)%5][(n>>>1)/5|0],new s(t[n+1],t[n]));for(r=0;24>r;r+=1){for(o=H("SHA3-"),n=0;5>n;n+=1){i=e[n][0];var f=e[n][1],h=e[n][2],c=e[n][3],l=e[n][4];a[n]=new s(i.a^f.a^h.a^c.a^l.a,i.b^f.b^h.b^c.b^l.b)}for(n=0;5>n;n+=1)u[n]=P(a[(n+4)%5],g(a[(n+1)%5],1));for(n=0;5>n;n+=1)for(i=0;5>i;i+=1)e[n][i]=P(e[n][i],u[n]);for(n=0;5>n;n+=1)for(i=0;5>i;i+=1)o[i][(2*n+3*i)%5]=g(e[n][i],W[n][i]);for(n=0;5>n;n+=1)for(i=0;5>i;i+=1)e[n][i]=P(o[n][i],new s(~o[(n+1)%5][i].a&o[(n+2)%5][i].a,~o[(n+1)%5][i].b&o[(n+2)%5][i].b));e[0][0]=P(e[0][0],q[r])}return e}var D,Y,W,q;Y=[new s((D=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298])[0],3609767458),new s(D[1],602891725),new s(D[2],3964484399),new s(D[3],2173295548),new s(D[4],4081628472),new s(D[5],3053834265),new s(D[6],2937671579),new s(D[7],3664609560),new s(D[8],2734883394),new s(D[9],1164996542),new s(D[10],1323610764),new s(D[11],3590304994),new s(D[12],4068182383),new s(D[13],991336113),new s(D[14],633803317),new s(D[15],3479774868),new s(D[16],2666613458),new s(D[17],944711139),new s(D[18],2341262773),new s(D[19],2007800933),new s(D[20],1495990901),new s(D[21],1856431235),new s(D[22],3175218132),new s(D[23],2198950837),new s(D[24],3999719339),new s(D[25],766784016),new s(D[26],2566594879),new s(D[27],3203337956),new s(D[28],1034457026),new s(D[29],2466948901),new s(D[30],3758326383),new s(D[31],168717936),new s(D[32],1188179964),new s(D[33],1546045734),new s(D[34],1522805485),new s(D[35],2643833823),new s(D[36],2343527390),new s(D[37],1014477480),new s(D[38],1206759142),new s(D[39],344077627),new s(D[40],1290863460),new s(D[41],3158454273),new s(D[42],3505952657),new s(D[43],106217008),new s(D[44],3606008344),new s(D[45],1432725776),new s(D[46],1467031594),new s(D[47],851169720),new s(D[48],3100823752),new s(D[49],1363258195),new s(D[50],3750685593),new s(D[51],3785050280),new s(D[52],3318307427),new s(D[53],3812723403),new s(D[54],2003034995),new s(D[55],3602036899),new s(D[56],1575990012),new s(D[57],1125592928),new s(D[58],2716904306),new s(D[59],442776044),new s(D[60],593698344),new s(D[61],3733110249),new s(D[62],2999351573),new s(D[63],3815920427),new s(3391569614,3928383900),new s(3515267271,566280711),new s(3940187606,3454069534),new s(4118630271,4000239992),new s(116418474,1914138554),new s(174292421,2731055270),new s(289380356,3203993006),new s(460393269,320620315),new s(685471733,587496836),new s(852142971,1086792851),new s(1017036298,365543100),new s(1126000580,2618297676),new s(1288033470,3409855158),new s(1501505948,4234509866),new s(1607167915,987167468),new s(1816402316,1246189591)],q=[new s(0,1),new s(0,32898),new s(2147483648,32906),new s(2147483648,2147516416),new s(0,32907),new s(0,2147483649),new s(2147483648,2147516545),new s(2147483648,32777),new s(0,138),new s(0,136),new s(0,2147516425),new s(0,2147483658),new s(0,2147516555),new s(2147483648,139),new s(2147483648,32905),new s(2147483648,32771),new s(2147483648,32770),new s(2147483648,128),new s(0,32778),new s(2147483648,2147483658),new s(2147483648,2147516545),new s(2147483648,32896),new s(0,2147483649),new s(2147483648,2147516424)],W=[[0,36,3,41,18],[1,44,10,45,2],[62,6,43,15,61],[28,55,25,21,56],[27,20,39,8,14]],void 0===(n=function(){return o}.call(e,r,e,t))||(t.exports=n)}()},2307:(t,e,r)=>{t=r.nmd(t);var n="__lodash_hash_undefined__",i=9007199254740991,o="[object Arguments]",s="[object Array]",a="[object Boolean]",u="[object Date]",f="[object Error]",h="[object Function]",c="[object Map]",l="[object Number]",p="[object Object]",d="[object Promise]",y="[object RegExp]",g="[object Set]",v="[object String]",b="[object WeakMap]",w="[object ArrayBuffer]",m="[object DataView]",A=/^\[object .+?Constructor\]$/,_=/^(?:0|[1-9]\d*)$/,E={};E["[object Float32Array]"]=E["[object Float64Array]"]=E["[object Int8Array]"]=E["[object Int16Array]"]=E["[object Int32Array]"]=E["[object Uint8Array]"]=E["[object Uint8ClampedArray]"]=E["[object Uint16Array]"]=E["[object Uint32Array]"]=!0,E[o]=E[s]=E[w]=E[a]=E[m]=E[u]=E[f]=E[h]=E[c]=E[l]=E[p]=E[y]=E[g]=E[v]=E[b]=!1;var B="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g,x="object"==typeof self&&self&&self.Object===Object&&self,U=B||x||Function("return this")(),S=e&&!e.nodeType&&e,O=S&&t&&!t.nodeType&&t,k=O&&O.exports===S,T=k&&B.process,I=function(){try{return T&&T.binding&&T.binding("util")}catch(t){}}(),C=I&&I.isTypedArray;function L(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}function R(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function j(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}var N,M,P,H=Array.prototype,F=Function.prototype,$=Object.prototype,z=U["__core-js_shared__"],V=F.toString,D=$.hasOwnProperty,Y=(N=/[^.]+$/.exec(z&&z.keys&&z.keys.IE_PROTO||""))?"Symbol(src)_1."+N:"",W=$.toString,q=RegExp("^"+V.call(D).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Z=k?U.Buffer:void 0,J=U.Symbol,X=U.Uint8Array,G=$.propertyIsEnumerable,K=H.splice,Q=J?J.toStringTag:void 0,tt=Object.getOwnPropertySymbols,et=Z?Z.isBuffer:void 0,rt=(M=Object.keys,P=Object,function(t){return M(P(t))}),nt=Ot(U,"DataView"),it=Ot(U,"Map"),ot=Ot(U,"Promise"),st=Ot(U,"Set"),at=Ot(U,"WeakMap"),ut=Ot(Object,"create"),ft=Ct(nt),ht=Ct(it),ct=Ct(ot),lt=Ct(st),pt=Ct(at),dt=J?J.prototype:void 0,yt=dt?dt.valueOf:void 0;function gt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function vt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function bt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function wt(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new bt;++e<r;)this.add(t[e])}function mt(t){var e=this.__data__=new vt(t);this.size=e.size}function At(t,e){for(var r=t.length;r--;)if(Lt(t[r][0],e))return r;return-1}function _t(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":Q&&Q in Object(t)?function(t){var e=D.call(t,Q),r=t[Q];try{t[Q]=void 0;var n=!0}catch(t){}var i=W.call(t);return n&&(e?t[Q]=r:delete t[Q]),i}(t):function(t){return W.call(t)}(t)}function Et(t){return Ft(t)&&_t(t)==o}function Bt(t,e,r,n,i){return t===e||(null==t||null==e||!Ft(t)&&!Ft(e)?t!=t&&e!=e:function(t,e,r,n,i,h){var d=jt(t),b=jt(e),A=d?s:Tt(t),_=b?s:Tt(e),E=(A=A==o?p:A)==p,B=(_=_==o?p:_)==p,x=A==_;if(x&&Nt(t)){if(!Nt(e))return!1;d=!0,E=!1}if(x&&!E)return h||(h=new mt),d||$t(t)?xt(t,e,r,n,i,h):function(t,e,r,n,i,o,s){switch(r){case m:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case w:return!(t.byteLength!=e.byteLength||!o(new X(t),new X(e)));case a:case u:case l:return Lt(+t,+e);case f:return t.name==e.name&&t.message==e.message;case y:case v:return t==e+"";case c:var h=R;case g:var p=1&n;if(h||(h=j),t.size!=e.size&&!p)return!1;var d=s.get(t);if(d)return d==e;n|=2,s.set(t,e);var b=xt(h(t),h(e),n,i,o,s);return s.delete(t),b;case"[object Symbol]":if(yt)return yt.call(t)==yt.call(e)}return!1}(t,e,A,r,n,i,h);if(!(1&r)){var U=E&&D.call(t,"__wrapped__"),S=B&&D.call(e,"__wrapped__");if(U||S){var O=U?t.value():t,k=S?e.value():e;return h||(h=new mt),i(O,k,r,n,h)}}return!!x&&(h||(h=new mt),function(t,e,r,n,i,o){var s=1&r,a=Ut(t),u=a.length;if(u!=Ut(e).length&&!s)return!1;for(var f=u;f--;){var h=a[f];if(!(s?h in e:D.call(e,h)))return!1}var c=o.get(t);if(c&&o.get(e))return c==e;var l=!0;o.set(t,e),o.set(e,t);for(var p=s;++f<u;){var d=t[h=a[f]],y=e[h];if(n)var g=s?n(y,d,h,e,t,o):n(d,y,h,t,e,o);if(!(void 0===g?d===y||i(d,y,r,n,o):g)){l=!1;break}p||(p="constructor"==h)}if(l&&!p){var v=t.constructor,b=e.constructor;v==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof v&&v instanceof v&&"function"==typeof b&&b instanceof b||(l=!1)}return o.delete(t),o.delete(e),l}(t,e,r,n,i,h))}(t,e,r,n,Bt,i))}function xt(t,e,r,n,i,o){var s=1&r,a=t.length,u=e.length;if(a!=u&&!(s&&u>a))return!1;var f=o.get(t);if(f&&o.get(e))return f==e;var h=-1,c=!0,l=2&r?new wt:void 0;for(o.set(t,e),o.set(e,t);++h<a;){var p=t[h],d=e[h];if(n)var y=s?n(d,p,h,e,t,o):n(p,d,h,t,e,o);if(void 0!==y){if(y)continue;c=!1;break}if(l){if(!L(e,(function(t,e){if(s=e,!l.has(s)&&(p===t||i(p,t,r,n,o)))return l.push(e);var s}))){c=!1;break}}else if(p!==d&&!i(p,d,r,n,o)){c=!1;break}}return o.delete(t),o.delete(e),c}function Ut(t){return function(t,e,r){var n=e(t);return jt(t)?n:function(t,e){for(var r=-1,n=e.length,i=t.length;++r<n;)t[i+r]=e[r];return t}(n,r(t))}(t,zt,kt)}function St(t,e){var r,n,i=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map}function Ot(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return function(t){return!(!Ht(t)||function(t){return!!Y&&Y in t}(t))&&(Mt(t)?q:A).test(Ct(t))}(r)?r:void 0}gt.prototype.clear=function(){this.__data__=ut?ut(null):{},this.size=0},gt.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},gt.prototype.get=function(t){var e=this.__data__;if(ut){var r=e[t];return r===n?void 0:r}return D.call(e,t)?e[t]:void 0},gt.prototype.has=function(t){var e=this.__data__;return ut?void 0!==e[t]:D.call(e,t)},gt.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=ut&&void 0===e?n:e,this},vt.prototype.clear=function(){this.__data__=[],this.size=0},vt.prototype.delete=function(t){var e=this.__data__,r=At(e,t);return!(r<0||(r==e.length-1?e.pop():K.call(e,r,1),--this.size,0))},vt.prototype.get=function(t){var e=this.__data__,r=At(e,t);return r<0?void 0:e[r][1]},vt.prototype.has=function(t){return At(this.__data__,t)>-1},vt.prototype.set=function(t,e){var r=this.__data__,n=At(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},bt.prototype.clear=function(){this.size=0,this.__data__={hash:new gt,map:new(it||vt),string:new gt}},bt.prototype.delete=function(t){var e=St(this,t).delete(t);return this.size-=e?1:0,e},bt.prototype.get=function(t){return St(this,t).get(t)},bt.prototype.has=function(t){return St(this,t).has(t)},bt.prototype.set=function(t,e){var r=St(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},wt.prototype.add=wt.prototype.push=function(t){return this.__data__.set(t,n),this},wt.prototype.has=function(t){return this.__data__.has(t)},mt.prototype.clear=function(){this.__data__=new vt,this.size=0},mt.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},mt.prototype.get=function(t){return this.__data__.get(t)},mt.prototype.has=function(t){return this.__data__.has(t)},mt.prototype.set=function(t,e){var r=this.__data__;if(r instanceof vt){var n=r.__data__;if(!it||n.length<199)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new bt(n)}return r.set(t,e),this.size=r.size,this};var kt=tt?function(t){return null==t?[]:(t=Object(t),function(e,r){for(var n=-1,i=null==e?0:e.length,o=0,s=[];++n<i;){var a=e[n];u=a,G.call(t,u)&&(s[o++]=a)}var u;return s}(tt(t)))}:function(){return[]},Tt=_t;function It(t,e){return!!(e=null==e?i:e)&&("number"==typeof t||_.test(t))&&t>-1&&t%1==0&&t<e}function Ct(t){if(null!=t){try{return V.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Lt(t,e){return t===e||t!=t&&e!=e}(nt&&Tt(new nt(new ArrayBuffer(1)))!=m||it&&Tt(new it)!=c||ot&&Tt(ot.resolve())!=d||st&&Tt(new st)!=g||at&&Tt(new at)!=b)&&(Tt=function(t){var e=_t(t),r=e==p?t.constructor:void 0,n=r?Ct(r):"";if(n)switch(n){case ft:return m;case ht:return c;case ct:return d;case lt:return g;case pt:return b}return e});var Rt=Et(function(){return arguments}())?Et:function(t){return Ft(t)&&D.call(t,"callee")&&!G.call(t,"callee")},jt=Array.isArray,Nt=et||function(){return!1};function Mt(t){if(!Ht(t))return!1;var e=_t(t);return e==h||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Pt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=i}function Ht(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Ft(t){return null!=t&&"object"==typeof t}var $t=C?function(t){return function(e){return t(e)}}(C):function(t){return Ft(t)&&Pt(t.length)&&!!E[_t(t)]};function zt(t){return null!=(e=t)&&Pt(e.length)&&!Mt(e)?function(t,e){var r=jt(t),n=!r&&Rt(t),i=!r&&!n&&Nt(t),o=!r&&!n&&!i&&$t(t),s=r||n||i||o,a=s?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],u=a.length;for(var f in t)!e&&!D.call(t,f)||s&&("length"==f||i&&("offset"==f||"parent"==f)||o&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||It(f,u))||a.push(f);return a}(t):function(t){if(r=(e=t)&&e.constructor,e!==("function"==typeof r&&r.prototype||$))return rt(t);var e,r,n=[];for(var i in Object(t))D.call(t,i)&&"constructor"!=i&&n.push(i);return n}(t);var e}t.exports=function(t,e){return Bt(t,e)}},4588:(t,e,r)=>{var n=r(1964),i=r(5057),o=r(3028),s=r(3961);t.exports={isValidAddress:function(t,e,r={}){return function(t){var e=function(t){try{var e=o.decode(t);return n.decode(new Uint8Array(e).buffer)}catch(t){return null}}(t);if(!e||!Array.isArray(e)&&2!=e.length)return!1;var r=e[0],s=e[1];return"number"==typeof s&&i.crc32(r)==s}(t)||function(t,e,r){return s.isValidAddress(t,e,r)}(t,e,r)}}},7554:(t,e,r)=>{const n=r(1661);t.exports={isValidAddress:function(t,e,r={}){const{networkType:n="prod"}=r;return this.verifyChecksum(t)},verifyChecksum:function(t){if(58!==t.length)return!1;{const e=n.base32.b32decode(t),r=e.slice(0,e.length-4),i=n.byteArray2hexStr(e.slice(-4)).toString("HEX");return n.sha512_256(n.byteArray2hexStr(r)).substr(-8)===i}}}},6072:(t,e,r)=>{const n=r(3028);t.exports={isValidAddress:function(t,e,r={}){try{if(!t||0==t.length)return!1;if(e.minLength&&t.length<e.minLength)return!1;if(e.maxLength&&t.length>e.maxLength)return!1;try{const e=n.decode(t);if(!e||!e.length)return!1}catch(t){return!1}return!0}catch(t){return!1}}}},1859:(t,e,r)=>{var n=r(1661),i=r(2309),o=r(207);t.exports={isValidAddress:function(t,e,r){return function(t,e,r){var o,s=r?r.networkType:"",a="bitcoincash",u=new RegExp(e.regexp),f=t.split(":");if(1===f.length)o=t;else{if("bitcoincash"!==f[0])return!1;o=f[1]}if(!u.test(o))return!1;if(o.toLowerCase()!=o&&o.toUpperCase()!=o)return!1;var h=n.base32.b32decode(o);"testnet"===s&&(a="bchtest");try{if(i.verifyChecksum(a,h,i.encodings.BECH32))return!1}catch(t){return!1}return!0}(t,e,r)||o.isValidAddress(t,e,r)}}},3961:(t,e,r)=>{var n=r(2309);t.exports={isValidAddress:function(t,e,r={}){const{networkType:i="prod"}=r,o=n.decode(t,n.encodings.BECH32);if(!o)return!1;const s=o.hrp;let a;if("prod"===i||"testnet"===i)a=e.bech32Hrp[i];else{if(!e.bech32Hrp)return!1;a=e.bech32Hrp.prod.concat(e.bech32Hrp.testnet)}return-1!==a.indexOf(s)}}},207:(t,e,r)=>{var n=r(8764).Buffer,i=r(3028),o=r(5546),s=r(1661),a="prod";t.exports={isValidAddress:function(t,e,r={}){return function(t,e,r){const{networkType:o=a}=r;var u,f=function(t,e){var r=(e=e||{}).expectedLength||25,o=e.hashFunction||"sha256",a=function(t){try{return i.decode(t)}catch(t){return null}}(t);if(a){var u=a.length;if(u!==r)return null;if(e.regex&&!e.regex.test(t))return!1;var f=s.toHex(a.slice(u-4,u)),h=function(t,e){switch(t){case"blake256keccak256":var r=s.blake2b256(e);return s.keccak256Checksum(n.from(r,"hex"));case"blake256":return s.blake256Checksum(e);case"keccak256":return s.keccak256Checksum(e);default:return s.sha256Checksum(e)}}(o,s.toHex(a.slice(0,u-4)));return f===h?s.toHex(a.slice(0,r-24)):null}return null}(t,e);if(f){if("prod"===o||"testnet"===o)u=e.addressTypes[o];else{if(!e.addressTypes)return!1;u=e.addressTypes.prod.concat(e.addressTypes.testnet)}return u.indexOf(f)>=0}return!1}(t,e,r)||o.isValidAddress(t,e,r)}}},4554:t=>{var e="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";t.exports={b32decode:function(t){for(var r=new ArrayBuffer(5*t.length/8),n=new Uint8Array(r),i=0;i<t.length/8;i++){for(var o=[0,0,0,0,0,0,0,0],s=0;s<8;++s)o[s]=e.indexOf(t[8*i+s]);s=0,n[5*i+0]=o[s+0]<<3|o[s+1]>>2,n[5*i+1]=(3&o[s+1])<<6|o[s+2]<<1|o[s+3]>>4,n[5*i+2]=(15&o[s+3])<<4|o[s+4]>>1,n[5*i+3]=(1&o[s+4])<<7|o[s+5]<<2|o[s+6]>>3,n[5*i+4]=(7&o[s+6])<<5|o[s+7]}return n},b32encode:function(t){var r=[],n=Math.floor(t.length/5),i=t.length%5;if(0!=i){for(var o=0;o<5-i;o++)t+="\0";n+=1}for(o=0;o<n;o++)r.push(e.charAt(t.charCodeAt(5*o)>>3)),r.push(e.charAt((7&t.charCodeAt(5*o))<<2|t.charCodeAt(5*o+1)>>6)),r.push(e.charAt((63&t.charCodeAt(5*o+1))>>1)),r.push(e.charAt((1&t.charCodeAt(5*o+1))<<4|t.charCodeAt(5*o+2)>>4)),r.push(e.charAt((15&t.charCodeAt(5*o+2))<<1|t.charCodeAt(5*o+3)>>7)),r.push(e.charAt((127&t.charCodeAt(5*o+3))>>2)),r.push(e.charAt((3&t.charCodeAt(5*o+3))<<3|t.charCodeAt(5*o+4)>>5)),r.push(e.charAt(31&t.charCodeAt(5*o+4)));var s=0;for(1==i?s=6:2==i?s=4:3==i?s=3:4==i&&(s=1),o=0;o<s;o++)r.pop();for(o=0;o<s;o++)r.push("=");return r.join("")}}},3028:t=>{for(var e="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",r={},n=0;n<e.length;++n)r[e.charAt(n)]=n;var i=e.length;t.exports={decode:function(t){if(0===t.length)return[];var e,n,o=[0];for(e=0;e<t.length;++e){var s=t[e];if(!(s in r))throw new Error("Non-base58 character");for(n=0;n<o.length;++n)o[n]*=i;o[0]+=r[s];var a=0;for(n=0;n<o.length;++n)o[n]+=a,a=o[n]>>8,o[n]&=255;for(;a;)o.push(255&a),a>>=8}for(e=0;"1"===t[e]&&e<t.length-1;++e)o.push(0);return o.reverse()}}},2309:t=>{var e="qpzry9x8gf2tvdw0s3jn54khce6mua7l",r=[996825010,642813549,513874426,1027748829,705979059];const n={BECH32:"bech32",BECH32M:"bech32m"};function i(t){return t==n.BECH32?1:t==n.BECH32M?734539939:null}function o(t){for(var e=1,n=0;n<t.length;++n){var i=e>>25;e=(33554431&e)<<5^t[n];for(var o=0;o<5;++o)i>>o&1&&(e^=r[o])}return e}function s(t){var e,r=[];for(e=0;e<t.length;++e)r.push(t.charCodeAt(e)>>5);for(r.push(0),e=0;e<t.length;++e)r.push(31&t.charCodeAt(e));return r}function a(t,e,r){return o(s(t).concat(e))===i(r)}t.exports={decode:function(t,r){var n,i=!1,o=!1;for(n=0;n<t.length;++n){if(t.charCodeAt(n)<33||t.charCodeAt(n)>126)return null;t.charCodeAt(n)>=97&&t.charCodeAt(n)<=122&&(i=!0),t.charCodeAt(n)>=65&&t.charCodeAt(n)<=90&&(o=!0)}if(i&&o)return null;var s=(t=t.toLowerCase()).lastIndexOf("1");if(s<1||s+7>t.length||t.length>110)return null;var u=t.substring(0,s),f=[];for(n=s+1;n<t.length;++n){var h=e.indexOf(t.charAt(n));if(-1===h)return null;f.push(h)}return a(u,f,r)?{hrp:u,data:f.slice(0,f.length-6)}:null},encode:function(t,r,n){for(var a=r.concat(function(t,e,r){for(var n=o(s(t).concat(e).concat([0,0,0,0,0,0]))^i(r),a=[],u=0;u<6;++u)a.push(n>>5*(5-u)&31);return a}(t,r,n)),u=t+"1",f=0;f<a.length;++f)u+=e.charAt(a[f]);return u},encodings:n,verifyChecksum:a}},3041:(t,e)=>{!function(t){"use strict";var e={};function r(t,n,o){if(o!==e)return t instanceof r?t:void 0===t?i:r.parse(t);for(t=t||[];t.length&&!t[t.length-1];)--t.length;this._d=t,this._s=t.length?n||1:0}r._construct=function(t,n){return new r(t,n,e)};var n=1e7;r.base=n,r.base_log10=7;var i=new r([],0,e);r.ZERO=i;var o=new r([1],1,e);r.ONE=o;var s=new r(o._d,-1,e);r.M_ONE=s,r._0=i,r._1=o,r.small=[i,o,new r([2],1,e),new r([3],1,e),new r([4],1,e),new r([5],1,e),new r([6],1,e),new r([7],1,e),new r([8],1,e),new r([9],1,e),new r([10],1,e),new r([11],1,e),new r([12],1,e),new r([13],1,e),new r([14],1,e),new r([15],1,e),new r([16],1,e),new r([17],1,e),new r([18],1,e),new r([19],1,e),new r([20],1,e),new r([21],1,e),new r([22],1,e),new r([23],1,e),new r([24],1,e),new r([25],1,e),new r([26],1,e),new r([27],1,e),new r([28],1,e),new r([29],1,e),new r([30],1,e),new r([31],1,e),new r([32],1,e),new r([33],1,e),new r([34],1,e),new r([35],1,e),new r([36],1,e)],r.digits="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),r.prototype.toString=function(t){if((t=+t||10)<2||t>36)throw new Error("illegal radix "+t+".");if(0===this._s)return"0";if(10===t){var e=this._s<0?"-":"";e+=this._d[this._d.length-1].toString();for(var n=this._d.length-2;n>=0;n--){for(var i=this._d[n].toString();i.length<7;)i="0"+i;e+=i}return e}var o=r.digits;t=r.small[t];for(var s,a=this._s,u=this.abs(),f=[];0!==u._s;){var h=u.divRem(t);u=h[0],s=h[1],f.push(o[s.valueOf()])}return(a<0?"-":"")+f.reverse().join("")},r.radixRegex=[/^$/,/^$/,/^[01]*$/,/^[012]*$/,/^[0-3]*$/,/^[0-4]*$/,/^[0-5]*$/,/^[0-6]*$/,/^[0-7]*$/,/^[0-8]*$/,/^[0-9]*$/,/^[0-9aA]*$/,/^[0-9abAB]*$/,/^[0-9abcABC]*$/,/^[0-9a-dA-D]*$/,/^[0-9a-eA-E]*$/,/^[0-9a-fA-F]*$/,/^[0-9a-gA-G]*$/,/^[0-9a-hA-H]*$/,/^[0-9a-iA-I]*$/,/^[0-9a-jA-J]*$/,/^[0-9a-kA-K]*$/,/^[0-9a-lA-L]*$/,/^[0-9a-mA-M]*$/,/^[0-9a-nA-N]*$/,/^[0-9a-oA-O]*$/,/^[0-9a-pA-P]*$/,/^[0-9a-qA-Q]*$/,/^[0-9a-rA-R]*$/,/^[0-9a-sA-S]*$/,/^[0-9a-tA-T]*$/,/^[0-9a-uA-U]*$/,/^[0-9a-vA-V]*$/,/^[0-9a-wA-W]*$/,/^[0-9a-xA-X]*$/,/^[0-9a-yA-Y]*$/,/^[0-9a-zA-Z]*$/],r.parse=function(t,n){t=t.toString(),void 0!==n&&10!=+n||(t=t.replace(/\s*[*xX]\s*10\s*(\^|\*\*)\s*/,"e").replace(/^([+\-])?(\d+)\.?(\d*)[eE]([+\-]?\d+)$/,(function(t,e,r,n,i){var o=(i=+i)<0,s=r.length+i;t=(o?r:n).length,i=(i=Math.abs(i))>=t?i-t+o:0;var a=new Array(i+1).join("0"),u=r+n;return(e||"")+(o?u=a+u:u+=a).substr(0,s+=o?a.length:0)+(s<u.length?"."+u.substr(s):"")})));var o=new RegExp("^([+\\-]?)("+(void 0===n?"0[xcb]":16==n?"0x":8==n?"0c":2==n?"0b":"")+")?([0-9a-z]*)(?:\\.\\d*)?$","i").exec(t);if(o){var s=o[1]||"+",a=o[2]||"",u=o[3]||"";if(void 0===n)n="0x"===a||"0X"===a?16:"0c"===a||"0C"===a?8:"0b"===a||"0B"===a?2:10;else if(n<2||n>36)throw new Error("Illegal radix "+n+".");if(n=+n,!r.radixRegex[n].test(u))throw new Error("Bad digit for radix "+n);if(0===(u=u.replace(/^0+/,"").split("")).length)return i;if(s="-"===s?-1:1,10==n){for(var f=[];u.length>=7;)f.push(parseInt(u.splice(u.length-r.base_log10,r.base_log10).join(""),10));return f.push(parseInt(u.join(""),10)),new r(f,s,e)}f=i,n=r.small[n];for(var h=r.small,c=0;c<u.length;c++)f=f.multiply(n).add(h[parseInt(u[c],36)]);return new r(f._d,s,e)}throw new Error("Invalid BigInteger format: "+t)},r.prototype.add=function(t){if(0===this._s)return r(t);if(0===(t=r(t))._s)return this;if(this._s!==t._s)return t=t.negate(),this.subtract(t);for(var i,o=this._d,s=t._d,a=o.length,u=s.length,f=new Array(Math.max(a,u)+1),h=Math.min(a,u),c=0,l=0;l<h;l++)i=o[l]+s[l]+c,f[l]=i%n,c=i/n|0;for(u>a&&(o=s,a=u),l=h;c&&l<a;l++)i=o[l]+c,f[l]=i%n,c=i/n|0;for(c&&(f[l]=c);l<a;l++)f[l]=o[l];return new r(f,this._s,e)},r.prototype.negate=function(){return new r(this._d,0|-this._s,e)},r.prototype.abs=function(){return this._s<0?this.negate():this},r.prototype.subtract=function(t){if(0===this._s)return r(t).negate();if(0===(t=r(t))._s)return this;if(this._s!==t._s)return t=t.negate(),this.add(t);var o=this;this._s<0&&(o=new r(t._d,1,e),t=new r(this._d,1,e));var s=o.compareAbs(t);if(0===s)return i;if(s<0){var a=t;t=o,o=a}var u,f,h=o._d,c=t._d,l=h.length,p=c.length,d=new Array(l),y=0;for(u=0;u<p;u++)(f=h[u]-y-c[u])<0?(f+=n,y=1):y=0,d[u]=f;for(u=p;u<l;u++){if(!((f=h[u]-y)<0)){d[u++]=f;break}f+=n,d[u]=f}for(;u<l;u++)d[u]=h[u];return new r(d,s,e)},function(){function t(t,i){for(var o=t._d,s=o.slice(),a=0;;){var u=(o[a]||0)+1;if(s[a]=u%n,u<=9999999)break;++a}return new r(s,i,e)}function i(t,i){for(var o=t._d,s=o.slice(),a=0;;){var u=(o[a]||0)-1;if(!(u<0)){s[a]=u;break}s[a]=u+n,++a}return new r(s,i,e)}r.prototype.next=function(){switch(this._s){case 0:return o;case-1:return i(this,-1);default:return t(this,1)}},r.prototype.prev=function(){switch(this._s){case 0:return s;case-1:return t(this,-1);default:return i(this,1)}}}(),r.prototype.compareAbs=function(t){if(this===t)return 0;if(!(t instanceof r)){if(!isFinite(t))return isNaN(t)?t:-1;t=r(t)}if(0===this._s)return 0!==t._s?-1:0;if(0===t._s)return 1;var e=this._d.length,n=t._d.length;if(e<n)return-1;if(e>n)return 1;for(var i=this._d,o=t._d,s=e-1;s>=0;s--)if(i[s]!==o[s])return i[s]<o[s]?-1:1;return 0},r.prototype.compare=function(t){return this===t?0:(t=r(t),0===this._s?-t._s:this._s===t._s?this.compareAbs(t)*this._s:this._s)},r.prototype.isUnit=function(){return this===o||this===s||1===this._d.length&&1===this._d[0]},r.prototype.multiply=function(t){if(0===this._s)return i;if(0===(t=r(t))._s)return i;if(this.isUnit())return this._s<0?t.negate():t;if(t.isUnit())return t._s<0?this.negate():this;if(this===t)return this.square();var o,s=this._d.length>=t._d.length,a=(s?this:t)._d,u=(s?t:this)._d,f=a.length,h=u.length,c=f+h,l=new Array(c);for(o=0;o<c;o++)l[o]=0;for(o=0;o<h;o++){for(var p,d=0,y=u[o],g=f+o,v=o;v<g;v++)d=(p=l[v]+y*a[v-o]+d)/n|0,l[v]=p%n|0;d&&(d=(p=l[v]+d)/n|0,l[v]=p%n)}return new r(l,this._s*t._s,e)},r.prototype.multiplySingleDigit=function(t){if(0===t||0===this._s)return i;if(1===t)return this;var o;if(1===this._d.length)return new r((o=this._d[0]*t)>=n?[o%n|0,o/n|0]:[o],1,e);if(2===t)return this.add(this);if(this.isUnit())return new r([t],1,e);for(var s=this._d,a=s.length,u=a+1,f=new Array(u),h=0;h<u;h++)f[h]=0;for(var c=0,l=0;l<a;l++)c=(o=t*s[l]+c)/n|0,f[l]=o%n|0;return c&&(f[l]=c),new r(f,1,e)},r.prototype.square=function(){if(0===this._s)return i;if(this.isUnit())return o;var t,s,a,u,f=this._d,h=f.length,c=new Array(h+h+1);for(u=0;u<h;u++)a=2*u,s=(t=f[u]*f[u])/n|0,c[a]=t%n,c[a+1]=s;for(u=0;u<h;u++){s=0,a=2*u+1;for(var l=u+1;l<h;l++,a++)s=(t=f[l]*f[u]*2+c[a]+s)/n|0,c[a]=t%n;var p=s+c[a=h+u];s=p/n|0,c[a]=p%n,c[a+1]+=s}return new r(c,1,e)},r.prototype.quotient=function(t){return this.divRem(t)[0]},r.prototype.divide=r.prototype.quotient,r.prototype.remainder=function(t){return this.divRem(t)[1]},r.prototype.divRem=function(t){if(0===(t=r(t))._s)throw new Error("Divide by zero");if(0===this._s)return[i,i];if(1===t._d.length)return this.divRemSmall(t._s*t._d[0]);switch(this.compareAbs(t)){case 0:return[this._s===t._s?o:s,i];case-1:return[i,this]}for(var a,u=this._s*t._s,f=t.abs(),h=this._d,c=h.length,l=(t._d.length,[]),p=new r([],0,e);c;)if(p._d.unshift(h[--c]),(p=new r(p._d,1,e)).compareAbs(t)<0)l.push(0);else{if(0===p._s)a=0;else{var d=p._d.length,y=f._d.length,g=p._d[d-1]*n+p._d[d-2],v=f._d[y-1]*n+f._d[y-2];p._d.length>f._d.length&&(g=(g+1)*n),a=Math.ceil(g/v)}do{var b=f.multiplySingleDigit(a);if(b.compareAbs(p)<=0)break;a--}while(a);if(l.push(a),a){var w=p.subtract(b);p._d=w._d.slice()}}return[new r(l.reverse(),u,e),new r(p._d,this._s,e)]},r.prototype.divRemSmall=function(t){var o;if(0==(t=+t))throw new Error("Divide by zero");var s=t<0?-1:1,a=this._s*s;if((t=Math.abs(t))<1||t>=n)throw new Error("Argument out of range");if(0===this._s)return[i,i];if(1===t||-1===t)return[1===a?this.abs():new r(this._d,a,e),i];if(1===this._d.length){var u=new r([this._d[0]/t|0],1,e);return o=new r([this._d[0]%t|0],1,e),a<0&&(u=u.negate()),this._s<0&&(o=o.negate()),[u,o]}for(var f,h=this._d.slice(),c=new Array(h.length),l=0,p=0,d=0;h.length;)(l=l*n+h[h.length-1])<t?(c[d++]=0,h.pop(),p=n*p+l):(p=l-t*(f=0===l?0:l/t|0),c[d++]=f,f?(h.pop(),l=p):h.pop());return o=new r([p],1,e),this._s<0&&(o=o.negate()),[new r(c.reverse(),a,e),o]},r.prototype.isEven=function(){var t=this._d;return 0===this._s||0===t.length||t[0]%2==0},r.prototype.isOdd=function(){return!this.isEven()},r.prototype.sign=function(){return this._s},r.prototype.isPositive=function(){return this._s>0},r.prototype.isNegative=function(){return this._s<0},r.prototype.isZero=function(){return 0===this._s},r.prototype.exp10=function(t){if(0==(t=+t))return this;if(Math.abs(t)>Number(a))throw new Error("exponent too large in BigInteger.exp10");if(0===this._s)return i;if(t>0){for(var n=new r(this._d.slice(),this._s,e);t>=7;t-=7)n._d.unshift(0);return 0==t?n:(n._s=1,n=n.multiplySingleDigit(Math.pow(10,t)),this._s<0?n.negate():n)}if(-t>=7*this._d.length)return i;for(n=new r(this._d.slice(),this._s,e),t=-t;t>=7;t-=7)n._d.shift();return 0==t?n:n.divRemSmall(Math.pow(10,t))[0]},r.prototype.pow=function(t){if(this.isUnit())return this._s>0||r(t).isOdd()?this:this.negate();if(0===(t=r(t))._s)return o;if(t._s<0){if(0===this._s)throw new Error("Divide by zero");return i}if(0===this._s)return i;if(t.isUnit())return this;if(t.compareAbs(a)>0)throw new Error("exponent too large in BigInteger.pow");for(var e=this,n=o,s=r.small[2];t.isPositive();){if(t.isOdd()&&(n=n.multiply(e),t.isUnit()))return n;e=e.square(),t=t.quotient(s)}return n},r.prototype.modPow=function(t,e){for(var n=o,i=this;t.isPositive();)t.isOdd()&&(n=n.multiply(i).remainder(e)),(t=t.quotient(r.small[2])).isPositive()&&(i=i.square().remainder(e));return n},r.prototype.log=function(){switch(this._s){case 0:return-1/0;case-1:return NaN}var t=this._d.length;if(7*t<30)return Math.log(this.valueOf());var i=Math.ceil(30/7),o=this._d.slice(t-i);return Math.log(new r(o,1,e).valueOf())+(t-i)*Math.log(n)},r.prototype.valueOf=function(){return parseInt(this.toString(),10)},r.prototype.toJSValue=function(){return parseInt(this.toString(),10)},r.prototype.lowVal=function(){return this._d[0]||0};var a=r(2147483647);r.MAX_EXP=a,function(){function t(t){return function(e){return t.call(r(e))}}function e(t){return function(e,n){return t.call(r(e),r(n))}}function n(t){return function(e,n,i){return t.call(r(e),r(n),r(i))}}!function(){var i,o,s="toJSValue,isEven,isOdd,sign,isZero,isNegative,abs,isUnit,square,negate,isPositive,toString,next,prev,log".split(","),a="compare,remainder,divRem,subtract,add,quotient,divide,multiply,pow,compareAbs".split(","),u=["modPow"];for(i=0;i<s.length;i++)r[o=s[i]]=t(r.prototype[o]);for(i=0;i<a.length;i++)r[o=a[i]]=e(r.prototype[o]);for(i=0;i<u.length;i++)r[o=u[i]]=n(r.prototype[o]);r.exp10=function(t,e){return r(t).exp10(e)}}()}(),t.JSBigInt=r}(e)},680:(t,e,r)=>{"use strict";var n=r(8764).Buffer;u.sigma=[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3],[11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4],[7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8],[9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13],[2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9],[12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11],[13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10],[6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5],[10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3],[11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4],[7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8],[9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13],[2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9]],u.u256=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479],u.padding=n.from([128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),u.prototype._length_carry=function(t){for(var e=0;e<t.length&&!(t[e]<4294967296);++e)t[e]-=4294967296,t[e+1]+=1},u.prototype.update=function(t,e){t=n.from(t,e);for(var r=this._block,i=0;this._blockOffset+t.length-i>=r.length;){for(var o=this._blockOffset;o<r.length;)r[o++]=t[i++];this._length[0]+=8*r.length,this._length_carry(this._length),this._compress(),this._blockOffset=0}for(;i<t.length;)r[this._blockOffset++]=t[i++];return this};var i=n.from([1]),o=n.from([129]);function s(t,e){return(t<<32-e|t>>>e)>>>0}function a(t,e,r,n,i,o,a,f){var h=u.sigma,c=u.u256;t[n]=t[n]+((e[h[r][f]]^c[h[r][f+1]])>>>0)+t[i]>>>0,t[a]=s(t[a]^t[n],16),t[o]=t[o]+t[a]>>>0,t[i]=s(t[i]^t[o],12),t[n]=t[n]+((e[h[r][f+1]]^c[h[r][f]])>>>0)+t[i]>>>0,t[a]=s(t[a]^t[n],8),t[o]=t[o]+t[a]>>>0,t[i]=s(t[i]^t[o],7)}function u(){this._h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this._s=[0,0,0,0],this._block=n.allocUnsafe(64),this._blockOffset=0,this._length=[0,0],this._nullt=!1,this._zo=i,this._oo=o}u.prototype._compress=function(){var t,e=u.u256,r=new Array(16),n=new Array(16);for(t=0;t<16;++t)n[t]=this._block.readUInt32BE(4*t);for(t=0;t<8;++t)r[t]=this._h[t]>>>0;for(t=8;t<12;++t)r[t]=(this._s[t-8]^e[t-8])>>>0;for(t=12;t<16;++t)r[t]=e[t-8];for(this._nullt||(r[12]=(r[12]^this._length[0])>>>0,r[13]=(r[13]^this._length[0])>>>0,r[14]=(r[14]^this._length[1])>>>0,r[15]=(r[15]^this._length[1])>>>0),t=0;t<14;++t)a(r,n,t,0,4,8,12,0),a(r,n,t,1,5,9,13,2),a(r,n,t,2,6,10,14,4),a(r,n,t,3,7,11,15,6),a(r,n,t,0,5,10,15,8),a(r,n,t,1,6,11,12,10),a(r,n,t,2,7,8,13,12),a(r,n,t,3,4,9,14,14);for(t=0;t<16;++t)this._h[t%8]=(this._h[t%8]^r[t])>>>0;for(t=0;t<8;++t)this._h[t]=(this._h[t]^this._s[t%4])>>>0},u.prototype._padding=function(){var t=this._length[0]+8*this._blockOffset,e=this._length[1];t>=4294967296&&(t-=4294967296,e+=1);var r=n.allocUnsafe(8);r.writeUInt32BE(e,0),r.writeUInt32BE(t,4),55===this._blockOffset?(this._length[0]-=8,this.update(this._oo)):(this._blockOffset<55?(0===this._blockOffset&&(this._nullt=!0),this._length[0]-=8*(55-this._blockOffset),this.update(u.padding.slice(0,55-this._blockOffset))):(this._length[0]-=8*(64-this._blockOffset),this.update(u.padding.slice(0,64-this._blockOffset)),this._length[0]-=440,this.update(u.padding.slice(1,56)),this._nullt=!0),this.update(this._zo),this._length[0]-=8),this._length[0]-=64,this.update(r)},u.prototype.digest=function(t){this._padding();for(var e=n.allocUnsafe(32),r=0;r<8;++r)e.writeUInt32BE(this._h[r],4*r);return e.toString(t)},t.exports=u},7817:t=>{"use strict";function e(t,e,r){var n=t[e]+t[r],i=t[e+1]+t[r+1];n>=4294967296&&i++,t[e]=n,t[e+1]=i}function r(t,e,r,n){var i=t[e]+r;r<0&&(i+=4294967296);var o=t[e+1]+n;i>=4294967296&&o++,t[e]=i,t[e+1]=o}function n(t,e){return t[e]^t[e+1]<<8^t[e+2]<<16^t[e+3]<<24}function i(t,n,i,o,s,f){var h=u[s],c=u[s+1],l=u[f],p=u[f+1];e(a,t,n),r(a,t,h,c);var d=a[o]^a[t],y=a[o+1]^a[t+1];a[o]=y,a[o+1]=d,e(a,i,o),d=a[n]^a[i],y=a[n+1]^a[i+1],a[n]=d>>>24^y<<8,a[n+1]=y>>>24^d<<8,e(a,t,n),r(a,t,l,p),d=a[o]^a[t],y=a[o+1]^a[t+1],a[o]=d>>>16^y<<16,a[o+1]=y>>>16^d<<16,e(a,i,o),d=a[n]^a[i],y=a[n+1]^a[i+1],a[n]=y>>>31^d<<1,a[n+1]=d>>>31^y<<1}var o=new Uint32Array([4089235720,1779033703,2227873595,3144134277,4271175723,1013904242,1595750129,2773480762,2917565137,1359893119,725511199,2600822924,4215389547,528734635,327033209,1541459225]),s=new Uint8Array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3].map((function(t){return 2*t}))),a=new Uint32Array(32),u=new Uint32Array(32);function f(t,e){var r=0;for(r=0;r<16;r++)a[r]=t.h[r],a[r+16]=o[r];for(a[24]=a[24]^t.t,a[25]=a[25]^t.t/4294967296,e&&(a[28]=~a[28],a[29]=~a[29]),r=0;r<32;r++)u[r]=n(t.b,4*r);for(r=0;r<12;r++)i(0,8,16,24,s[16*r+0],s[16*r+1]),i(2,10,18,26,s[16*r+2],s[16*r+3]),i(4,12,20,28,s[16*r+4],s[16*r+5]),i(6,14,22,30,s[16*r+6],s[16*r+7]),i(0,10,20,30,s[16*r+8],s[16*r+9]),i(2,12,22,24,s[16*r+10],s[16*r+11]),i(4,14,16,26,s[16*r+12],s[16*r+13]),i(6,8,18,28,s[16*r+14],s[16*r+15]);for(r=0;r<16;r++)t.h[r]=t.h[r]^a[r]^a[r+16]}var h=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);function c(t,e,r,i){h.fill(0),this.b=new Uint8Array(128),this.h=new Uint32Array(16),this.t=0,this.c=0,this.outlen=t,h[0]=t,e&&(h[1]=e.length),h[2]=1,h[3]=1,r&&h.set(r,32),i&&h.set(i,48);for(var s=0;s<16;s++)this.h[s]=o[s]^n(h,4*s);e&&(l(this,e),this.c=128)}function l(t,e){for(var r=0;r<e.length;r++)128===t.c&&(t.t+=t.c,f(t,!1),t.c=0),t.b[t.c++]=e[r]}c.prototype.update=function(t){return l(this,t),this},c.prototype.digest=function(t){var e=t&&"binary"!==t&&"hex"!==t?t:new Uint8Array(this.outlen);return function(t,e){for(t.t+=t.c;t.c<128;)t.b[t.c++]=0;f(t,!0);for(var r=0;r<t.outlen;r++)e[r]=t.h[r>>2]>>8*(3&r)}(this,e),"hex"===t?function(t){for(var e="",r=0;r<t.length;r++)e+=(n=t[r])<16?"0"+n.toString(16):n.toString(16);var n;return e}(e):e},c.prototype.final=c.prototype.digest,t.exports=c},7041:(t,e,r)=>{var n=r(3041).JSBigInt,i=function(){for(var t={},e="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",r=[],i=0;i<e.length;i++)r.push(e.charCodeAt(i));var o=[0,2,3,5,6,7,9,10,11],s=r.length,a=11,u=new n(2).pow(64);return t.encode_block=function(t,e,i){if(t.length<1||t.length>a)throw"Invalid block length: "+t.length;for(var u=function(t){if(t.length<1||t.length>8)throw"Invalid input length";var e=n.ZERO,r=new n(2).pow(8),i=0;switch(9-t.length){case 1:e=e.add(t[i++]);case 2:e=e.multiply(r).add(t[i++]);case 3:e=e.multiply(r).add(t[i++]);case 4:e=e.multiply(r).add(t[i++]);case 5:e=e.multiply(r).add(t[i++]);case 6:e=e.multiply(r).add(t[i++]);case 7:e=e.multiply(r).add(t[i++]);case 8:e=e.multiply(r).add(t[i++]);break;default:throw"Impossible condition"}return e}(t),f=o[t.length]-1;1===u.compare(0);){var h=u.divRem(s),c=h[1];u=h[0],e[i+f]=r[c.toJSValue()],f--}return e},t.encode=function(e){var n=function(t){if(t.length%2!=0)throw"Hex string has invalid length!";for(var e=new Uint8Array(t.length/2),r=0;r<t.length/2;++r)e[r]=parseInt(t.slice(2*r,2*r+2),16);return e}(e);if(0===n.length)return"";var i,s=Math.floor(n.length/8),u=n.length%8,f=s*a+o[u],h=new Uint8Array(f);for(i=0;i<f;++i)h[i]=r[0];for(i=0;i<s;i++)h=t.encode_block(n.subarray(8*i,8*i+8),h,i*a);return u>0&&(h=t.encode_block(n.subarray(8*s,8*s+u),h,s*a)),function(t){for(var e=[],r=0;r<t.length;r++)e.push(String.fromCharCode(t[r]));return e.join("")}(h)},t.decode_block=function(t,e,i){if(t.length<1||t.length>a)throw"Invalid block length: "+t.length;var f=o.indexOf(t.length);if(f<=0)throw"Invalid block size";for(var h=new n(0),c=new n(1),l=t.length-1;l>=0;l--){var p=r.indexOf(t[l]);if(p<0)throw"Invalid symbol";var d=c.multiply(p).add(h);if(1===d.compare(u))throw"Overflow";h=d,c=c.multiply(s)}if(f<8&&new n(2).pow(8*f).compare(h)<=0)throw"Overflow 2";return e.set(function(t,e){var r=new Uint8Array(e);if(e<1||e>8)throw"Invalid input length";for(var i=new n(2).pow(8),o=e-1;o>=0;o--)r[o]=t.remainder(i).toJSValue(),t=t.divide(i);return r}(h,f),i),e},t.decode=function(e){if(e=function(t){for(var e=new Uint8Array(t.length),r=0;r<t.length;r++)e[r]=t.charCodeAt(r);return e}(e),0===e.length)return"";var r=Math.floor(e.length/a),n=e.length%a,i=o.indexOf(n);if(i<0)throw"Invalid encoded length";for(var s=new Uint8Array(8*r+i),u=0;u<r;u++)s=t.decode_block(e.subarray(u*a,u*a+a),s,8*u);return n>0&&(s=t.decode_block(e.subarray(r*a,r*a+n),s,8*r)),function(t){for(var e=[],r=0;r<t.length;++r)e.push(("0"+t[r].toString(16)).slice(-2));return e.join("")}(s)},t}();t.exports=i},5546:(t,e,r)=>{var n=r(2309);function i(t,e,r,n){for(var i=0,o=0,s=[],a=(1<<r)-1,u=0;u<t.length;++u){var f=t[u];if(f<0||f>>e!=0)return null;for(i=i<<e|f,o+=e;o>=r;)o-=r,s.push(i>>o&a)}if(n)o>0&&s.push(i<<r-o&a);else if(o>=e||i<<r-o&a)return null;return s}function o(t,e){var r=!1,o=n.decode(e,n.encodings.BECH32);if(null===o&&(o=n.decode(e,n.encodings.BECH32M),r=!0),null===o||o.hrp!==t||o.data.length<1||o.data[0]>16)return null;var s=i(o.data.slice(1),5,8,!1);return null===s||s.length<2||s.length>40||0===o.data[0]&&20!==s.length&&32!==s.length||0===o.data[0]&&r?null:0===o.data[0]||r?{version:o.data[0],program:s}:null}function s(t,e,r){var s=n.encodings.BECH32;e>0&&(s=n.encodings.BECH32M);var a=n.encode(t,[e].concat(i(r,8,5,!0)),s);return null===o(t,a)?null:a}var a="prod";t.exports={encode:s,decode:o,isValidAddress:function(t,e,r={}){if(!e.bech32Hrp||0===e.bech32Hrp.length)return!1;const{networkType:n=a}=r;var i;if("prod"===n||"testnet"===n)i=e.bech32Hrp[n];else{if(!e.bech32Hrp)return!1;i=e.bech32Hrp.prod.concat(e.bech32Hrp.testnet)}for(var u of i){var f=o(u,t);if(f)return s(u,f.version,f.program)===t.toLowerCase()}return!1}}},8245:(t,e,r)=>{"use strict";var n=r(4155),i="input is invalid type",o="object"==typeof window,s=o?window:{};s.JS_SHA3_NO_WINDOW&&(o=!1);var a=!o&&"object"==typeof self;!s.JS_SHA3_NO_NODE_JS&&"object"==typeof n&&n.versions&&n.versions.node?s=r.g:a&&(s=self);var u=!s.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,f="0123456789abcdef".split(""),h=[4,1024,262144,67108864],c=[0,8,16,24],l=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],p=[224,256,384,512],d=[128,256],y=["hex","buffer","arrayBuffer","array","digest"],g={128:168,256:136};!s.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),!u||!s.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(t){return"object"==typeof t&&t.buffer&&t.buffer.constructor===ArrayBuffer});for(var v=function(t,e,r){return function(n){return new C(t,e,t).update(n)[r]()}},b=function(t,e,r){return function(n,i){return new C(t,e,i).update(n)[r]()}},w=function(t,e,r){return function(e,n,i,o){return B["cshake"+t].update(e,n,i,o)[r]()}},m=function(t,e,r){return function(e,n,i,o){return B["kmac"+t].update(e,n,i,o)[r]()}},A=function(t,e,r,n){for(var i=0;i<y.length;++i){var o=y[i];t[o]=e(r,n,o)}return t},_=function(t,e){var r=v(t,e,"hex");return r.create=function(){return new C(t,e,t)},r.update=function(t){return r.create().update(t)},A(r,v,t,e)},E=[{name:"keccak",padding:[1,256,65536,16777216],bits:p,createMethod:_},{name:"sha3",padding:[6,1536,393216,100663296],bits:p,createMethod:_},{name:"shake",padding:[31,7936,2031616,520093696],bits:d,createMethod:function(t,e){var r=b(t,e,"hex");return r.create=function(r){return new C(t,e,r)},r.update=function(t,e){return r.create(e).update(t)},A(r,b,t,e)}},{name:"cshake",padding:h,bits:d,createMethod:function(t,e){var r=g[t],n=w(t,0,"hex");return n.create=function(n,i,o){return i||o?new C(t,e,n).bytepad([i,o],r):B["shake"+t].create(n)},n.update=function(t,e,r,i){return n.create(e,r,i).update(t)},A(n,w,t,e)}},{name:"kmac",padding:h,bits:d,createMethod:function(t,e){var r=g[t],n=m(t,0,"hex");return n.create=function(n,i,o){return new L(t,e,i).bytepad(["KMAC",o],r).bytepad([n],r)},n.update=function(t,e,r,i){return n.create(t,r,i).update(e)},A(n,m,t,e)}}],B={},x=[],U=0;U<E.length;++U)for(var S=E[U],O=S.bits,k=0;k<O.length;++k){var T=S.name+"_"+O[k];if(x.push(T),B[T]=S.createMethod(O[k],S.padding),"sha3"!==S.name){var I=S.name+O[k];x.push(I),B[I]=B[T]}}function C(t,e,r){this.blocks=[],this.s=[],this.padding=e,this.outputBits=r,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(t<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var n=0;n<50;++n)this.s[n]=0}function L(t,e,r){C.call(this,t,e,r)}C.prototype.update=function(t){if(!this.finalized){var e,r=typeof t;if("string"!==r){if("object"!==r)throw i;if(null===t)throw i;if(u&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||u&&ArrayBuffer.isView(t)))throw i;e=!0}for(var n,o,s=this.blocks,a=this.byteCount,f=t.length,h=this.blockCount,l=0,p=this.s;l<f;){if(this.reset)for(this.reset=!1,s[0]=this.block,n=1;n<h+1;++n)s[n]=0;if(e)for(n=this.start;l<f&&n<a;++l)s[n>>2]|=t[l]<<c[3&n++];else for(n=this.start;l<f&&n<a;++l)(o=t.charCodeAt(l))<128?s[n>>2]|=o<<c[3&n++]:o<2048?(s[n>>2]|=(192|o>>6)<<c[3&n++],s[n>>2]|=(128|63&o)<<c[3&n++]):o<55296||o>=57344?(s[n>>2]|=(224|o>>12)<<c[3&n++],s[n>>2]|=(128|o>>6&63)<<c[3&n++],s[n>>2]|=(128|63&o)<<c[3&n++]):(o=65536+((1023&o)<<10|1023&t.charCodeAt(++l)),s[n>>2]|=(240|o>>18)<<c[3&n++],s[n>>2]|=(128|o>>12&63)<<c[3&n++],s[n>>2]|=(128|o>>6&63)<<c[3&n++],s[n>>2]|=(128|63&o)<<c[3&n++]);if(this.lastByteIndex=n,n>=a){for(this.start=n-a,this.block=s[h],n=0;n<h;++n)p[n]^=s[n];R(p),this.reset=!0}else this.start=n}return this}},C.prototype.encode=function(t,e){var r=255&t,n=1,i=[r];for(r=255&(t>>=8);r>0;)i.unshift(r),r=255&(t>>=8),++n;return e?i.push(n):i.unshift(n),this.update(i),i.length},C.prototype.encodeString=function(t){var e,r=typeof t;if("string"!==r){if("object"!==r)throw i;if(null===t)throw i;if(u&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||u&&ArrayBuffer.isView(t)))throw i;e=!0}var n=0,o=t.length;if(e)n=o;else for(var s=0;s<t.length;++s){var a=t.charCodeAt(s);a<128?n+=1:a<2048?n+=2:a<55296||a>=57344?n+=3:(a=65536+((1023&a)<<10|1023&t.charCodeAt(++s)),n+=4)}return n+=this.encode(8*n),this.update(t),n},C.prototype.bytepad=function(t,e){for(var r=this.encode(e),n=0;n<t.length;++n)r+=this.encodeString(t[n]);var i=e-r%e,o=[];return o.length=i,this.update(o),this},C.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,e=this.lastByteIndex,r=this.blockCount,n=this.s;if(t[e>>2]|=this.padding[3&e],this.lastByteIndex===this.byteCount)for(t[0]=t[r],e=1;e<r+1;++e)t[e]=0;for(t[r-1]|=2147483648,e=0;e<r;++e)n[e]^=t[e];R(n)}},C.prototype.toString=C.prototype.hex=function(){this.finalize();for(var t,e=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,s=0,a="";s<n;){for(o=0;o<e&&s<n;++o,++s)t=r[o],a+=f[t>>4&15]+f[15&t]+f[t>>12&15]+f[t>>8&15]+f[t>>20&15]+f[t>>16&15]+f[t>>28&15]+f[t>>24&15];s%e==0&&(R(r),o=0)}return i&&(t=r[o],a+=f[t>>4&15]+f[15&t],i>1&&(a+=f[t>>12&15]+f[t>>8&15]),i>2&&(a+=f[t>>20&15]+f[t>>16&15])),a},C.prototype.arrayBuffer=function(){this.finalize();var t,e=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,s=0,a=this.outputBits>>3;t=i?new ArrayBuffer(n+1<<2):new ArrayBuffer(a);for(var u=new Uint32Array(t);s<n;){for(o=0;o<e&&s<n;++o,++s)u[s]=r[o];s%e==0&&R(r)}return i&&(u[o]=r[o],t=t.slice(0,a)),t},C.prototype.buffer=C.prototype.arrayBuffer,C.prototype.digest=C.prototype.array=function(){this.finalize();for(var t,e,r=this.blockCount,n=this.s,i=this.outputBlocks,o=this.extraBytes,s=0,a=0,u=[];a<i;){for(s=0;s<r&&a<i;++s,++a)t=a<<2,e=n[s],u[t]=255&e,u[t+1]=e>>8&255,u[t+2]=e>>16&255,u[t+3]=e>>24&255;a%r==0&&R(n)}return o&&(t=a<<2,e=n[s],u[t]=255&e,o>1&&(u[t+1]=e>>8&255),o>2&&(u[t+2]=e>>16&255)),u},L.prototype=new C,L.prototype.finalize=function(){return this.encode(this.outputBits,!0),C.prototype.finalize.call(this)};var R=function(t){var e,r,n,i,o,s,a,u,f,h,c,p,d,y,g,v,b,w,m,A,_,E,B,x,U,S,O,k,T,I,C,L,R,j,N,M,P,H,F,$,z,V,D,Y,W,q,Z,J,X,G,K,Q,tt,et,rt,nt,it,ot,st,at,ut,ft,ht;for(n=0;n<48;n+=2)i=t[0]^t[10]^t[20]^t[30]^t[40],o=t[1]^t[11]^t[21]^t[31]^t[41],s=t[2]^t[12]^t[22]^t[32]^t[42],a=t[3]^t[13]^t[23]^t[33]^t[43],u=t[4]^t[14]^t[24]^t[34]^t[44],f=t[5]^t[15]^t[25]^t[35]^t[45],h=t[6]^t[16]^t[26]^t[36]^t[46],c=t[7]^t[17]^t[27]^t[37]^t[47],e=(p=t[8]^t[18]^t[28]^t[38]^t[48])^(s<<1|a>>>31),r=(d=t[9]^t[19]^t[29]^t[39]^t[49])^(a<<1|s>>>31),t[0]^=e,t[1]^=r,t[10]^=e,t[11]^=r,t[20]^=e,t[21]^=r,t[30]^=e,t[31]^=r,t[40]^=e,t[41]^=r,e=i^(u<<1|f>>>31),r=o^(f<<1|u>>>31),t[2]^=e,t[3]^=r,t[12]^=e,t[13]^=r,t[22]^=e,t[23]^=r,t[32]^=e,t[33]^=r,t[42]^=e,t[43]^=r,e=s^(h<<1|c>>>31),r=a^(c<<1|h>>>31),t[4]^=e,t[5]^=r,t[14]^=e,t[15]^=r,t[24]^=e,t[25]^=r,t[34]^=e,t[35]^=r,t[44]^=e,t[45]^=r,e=u^(p<<1|d>>>31),r=f^(d<<1|p>>>31),t[6]^=e,t[7]^=r,t[16]^=e,t[17]^=r,t[26]^=e,t[27]^=r,t[36]^=e,t[37]^=r,t[46]^=e,t[47]^=r,e=h^(i<<1|o>>>31),r=c^(o<<1|i>>>31),t[8]^=e,t[9]^=r,t[18]^=e,t[19]^=r,t[28]^=e,t[29]^=r,t[38]^=e,t[39]^=r,t[48]^=e,t[49]^=r,y=t[0],g=t[1],q=t[11]<<4|t[10]>>>28,Z=t[10]<<4|t[11]>>>28,k=t[20]<<3|t[21]>>>29,T=t[21]<<3|t[20]>>>29,at=t[31]<<9|t[30]>>>23,ut=t[30]<<9|t[31]>>>23,V=t[40]<<18|t[41]>>>14,D=t[41]<<18|t[40]>>>14,j=t[2]<<1|t[3]>>>31,N=t[3]<<1|t[2]>>>31,v=t[13]<<12|t[12]>>>20,b=t[12]<<12|t[13]>>>20,J=t[22]<<10|t[23]>>>22,X=t[23]<<10|t[22]>>>22,I=t[33]<<13|t[32]>>>19,C=t[32]<<13|t[33]>>>19,ft=t[42]<<2|t[43]>>>30,ht=t[43]<<2|t[42]>>>30,et=t[5]<<30|t[4]>>>2,rt=t[4]<<30|t[5]>>>2,M=t[14]<<6|t[15]>>>26,P=t[15]<<6|t[14]>>>26,w=t[25]<<11|t[24]>>>21,m=t[24]<<11|t[25]>>>21,G=t[34]<<15|t[35]>>>17,K=t[35]<<15|t[34]>>>17,L=t[45]<<29|t[44]>>>3,R=t[44]<<29|t[45]>>>3,x=t[6]<<28|t[7]>>>4,U=t[7]<<28|t[6]>>>4,nt=t[17]<<23|t[16]>>>9,it=t[16]<<23|t[17]>>>9,H=t[26]<<25|t[27]>>>7,F=t[27]<<25|t[26]>>>7,A=t[36]<<21|t[37]>>>11,_=t[37]<<21|t[36]>>>11,Q=t[47]<<24|t[46]>>>8,tt=t[46]<<24|t[47]>>>8,Y=t[8]<<27|t[9]>>>5,W=t[9]<<27|t[8]>>>5,S=t[18]<<20|t[19]>>>12,O=t[19]<<20|t[18]>>>12,ot=t[29]<<7|t[28]>>>25,st=t[28]<<7|t[29]>>>25,$=t[38]<<8|t[39]>>>24,z=t[39]<<8|t[38]>>>24,E=t[48]<<14|t[49]>>>18,B=t[49]<<14|t[48]>>>18,t[0]=y^~v&w,t[1]=g^~b&m,t[10]=x^~S&k,t[11]=U^~O&T,t[20]=j^~M&H,t[21]=N^~P&F,t[30]=Y^~q&J,t[31]=W^~Z&X,t[40]=et^~nt&ot,t[41]=rt^~it&st,t[2]=v^~w&A,t[3]=b^~m&_,t[12]=S^~k&I,t[13]=O^~T&C,t[22]=M^~H&$,t[23]=P^~F&z,t[32]=q^~J&G,t[33]=Z^~X&K,t[42]=nt^~ot&at,t[43]=it^~st&ut,t[4]=w^~A&E,t[5]=m^~_&B,t[14]=k^~I&L,t[15]=T^~C&R,t[24]=H^~$&V,t[25]=F^~z&D,t[34]=J^~G&Q,t[35]=X^~K&tt,t[44]=ot^~at&ft,t[45]=st^~ut&ht,t[6]=A^~E&y,t[7]=_^~B&g,t[16]=I^~L&x,t[17]=C^~R&U,t[26]=$^~V&j,t[27]=z^~D&N,t[36]=G^~Q&Y,t[37]=K^~tt&W,t[46]=at^~ft&et,t[47]=ut^~ht&rt,t[8]=E^~y&v,t[9]=B^~g&b,t[18]=L^~x&S,t[19]=R^~U&O,t[28]=V^~j&M,t[29]=D^~N&P,t[38]=Q^~Y&q,t[39]=tt^~W&Z,t[48]=ft^~et&nt,t[49]=ht^~rt&it,t[0]^=l[n],t[1]^=l[n+1]};t.exports=B},1661:(t,e,r)=>{var n=r(8764).Buffer,i=r(5362),o=r(3434).sha512_256,s=r(680),a=r(8245).keccak256,u=r(7817),f=r(3028),h=r(4554),c=r(299);function l(t,e){var r=t.toString(16);return r.length%2==1&&(r="0"+r),r.padStart(e,"0")}function p(t){return t>="A"&&t<="F"||t>="a"&&t<="f"||t>="0"&&t<="9"?1:0}function d(t){var e=0;return t>="A"&&t<="F"?e=t.charCodeAt(0)-"A".charCodeAt(0)+10:t>="a"&&t<="f"?e=t.charCodeAt(0)-"a".charCodeAt(0)+10:t>="0"&&t<="9"&&(e=t.charCodeAt(0)-"0".charCodeAt(0)),e}function y(t){var e="0123456789ABCDEF",r="";return(r+=e.charAt(t>>4))+e.charAt(15&t)}t.exports={numberToHex:l,toHex:function(t){for(var e="",r=0;r<t.length;r++)e+=l(t[r]);return e},sha256:function(t,e="HEX"){var r=new i("SHA-256",e);return r.update(t),r.getHash(e)},sha256x2:function(t,e="HEX"){return this.sha256(this.sha256(t,e),e)},sha256Checksum:function(t){return this.sha256(this.sha256(t)).substr(0,8)},sha512_256:function(t,e="HEX"){const r=o.create();return r.update(n.from(t,e)),r.hex().toUpperCase()},blake256:function(t){return(new s).update(t,"hex").digest("hex")},blake256Checksum:function(t){return this.blake256(this.blake256(t)).substr(0,8)},blake2b:function(t,e){return new u(e).update(n.from(t,"hex")).digest("hex")},keccak256:function(t){return a(t)},keccak256Checksum:function(t){return a(t).toString().substr(0,8)},blake2b256:function(t){return new u(32).update(n.from(t,"hex"),32).digest("hex")},base58:f.decode,byteArray2hexStr:function(t){for(var e="",r=0;r<t.length-1;r++)e+=y(t[r]);return e+y(t[r])},hexStr2byteArray:function(t){var e=Array(),r=0,n=0,i=0,o=0;for(n=0;n<t.length;n++){var s=t.charAt(n);p(s)&&(r<<=4,r+=d(s),0==++i%2&&(e[o++]=r,r=0))}return e},bigNumberToBuffer:function(t,e){return new c(t).toBuffer({size:e,endian:"big"})},base32:h}},3444:(t,e,r)=>{var n=r(1686),i=r(9947),o=r(207),s=r(4588),a=r(9738),u=r(6937),f=r(2548),h=r(4740),c=r(7409),l=r(2179),p=r(1859),d=r(7201),y=r(4370),g=r(1935),v=r(3585),b=r(7554),w=r(4292),m=[{name:"Bitcoin",symbol:"btc",addressTypes:{prod:["00","05"],testnet:["6f","c4","3c","26"]},bech32Hrp:{prod:["bc"],testnet:["tb"]},validator:o},{name:"BitcoinCash",symbol:"bch",regexp:"^[qQpP]{1}[0-9a-zA-Z]{41}$",addressTypes:{prod:["00","05"],testnet:["6f","c4"]},validator:p},{name:"Bitcoin SV",symbol:"bsv",regexp:"^[qQ]{1}[0-9a-zA-Z]{41}$",addressTypes:{prod:["00","05"],testnet:["6f","c4"]},validator:p},{name:"LiteCoin",symbol:"ltc",addressTypes:{prod:["30","05","32"],testnet:["6f","c4","3a"]},bech32Hrp:{prod:["ltc"],testnet:["tltc"]},validator:o},{name:"PeerCoin",symbol:"ppc",addressTypes:{prod:["37","75"],testnet:["6f","c4"]},validator:o},{name:"DogeCoin",symbol:"doge",addressTypes:{prod:["1e","16"],testnet:["71","c4"]},validator:o},{name:"BeaverCoin",symbol:"bvc",addressTypes:{prod:["19","05"],testnet:["6f","c4"]},validator:o},{name:"FreiCoin",symbol:"frc",addressTypes:{prod:["00","05"],testnet:["6f","c4"]},validator:o},{name:"ProtoShares",symbol:"pts",addressTypes:{prod:["38","05"],testnet:["6f","c4"]},validator:o},{name:"MegaCoin",symbol:"mec",addressTypes:{prod:["32","05"],testnet:["6f","c4"]},validator:o},{name:"PrimeCoin",symbol:"xpm",addressTypes:{prod:["17","53"],testnet:["6f","c4"]},validator:o},{name:"AuroraCoin",symbol:"aur",addressTypes:{prod:["17","05"],testnet:["6f","c4"]},validator:o},{name:"NameCoin",symbol:"nmc",addressTypes:{prod:["34"],testnet:[]},validator:o},{name:"BioCoin",symbol:"bio",addressTypes:{prod:["19","14"],testnet:["6f","c4"]},validator:o},{name:"GarliCoin",symbol:"grlc",addressTypes:{prod:["26","05"],testnet:["6f","c4"]},validator:o},{name:"VertCoin",symbol:"vtc",addressTypes:{prod:["0x","47","71","05"],testnet:["6f","c4"]},bech32Hrp:{prod:["vtc"],testnet:["tvtc"]},validator:o},{name:"BitcoinGold",symbol:"btg",addressTypes:{prod:["26","17"],testnet:["6f","c4"]},validator:o},{name:"Komodo",symbol:"kmd",addressTypes:{prod:["3c","55"],testnet:["0","5"]},validator:o},{name:"BitcoinZ",symbol:"btcz",expectedLength:26,addressTypes:{prod:["1cb8","1cbd"],testnet:["1d25","1cba"]},validator:o},{name:"BitcoinPrivate",symbol:"btcp",expectedLength:26,addressTypes:{prod:["1325","13af"],testnet:["1957","19e0"]},validator:o},{name:"Hush",symbol:"hush",expectedLength:26,addressTypes:{prod:["1cb8","1cbd"],testnet:["1d25","1cba"]},validator:o},{name:"SnowGem",symbol:"sng",expectedLength:26,addressTypes:{prod:["1c28","1c2d"],testnet:["1d25","1cba"]},validator:o},{name:"ZCash",symbol:"zec",expectedLength:26,addressTypes:{prod:["1cb8","1cbd"],testnet:["1d25","1cba"]},validator:o},{name:"ZClassic",symbol:"zcl",expectedLength:26,addressTypes:{prod:["1cb8","1cbd"],testnet:["1d25","1cba"]},validator:o},{name:"ZenCash",symbol:"zen",expectedLength:26,addressTypes:{prod:["2089","2096"],testnet:["2092","2098"]},validator:o},{name:"VoteCoin",symbol:"vot",expectedLength:26,addressTypes:{prod:["1cb8","1cbd"],testnet:["1d25","1cba"]},validator:o},{name:"Decred",symbol:"dcr",addressTypes:{prod:["073f","071a"],testnet:["0f21","0efc"]},hashFunction:"blake256",expectedLength:26,validator:o},{name:"GameCredits",symbol:"game",addressTypes:{prod:["26","05"],testnet:[]},validator:i},{name:"PIVX",symbol:"pivx",addressTypes:{prod:["1e","0d"],testnet:[]},validator:o},{name:"SolarCoin",symbol:"slr",addressTypes:{prod:["12","05"],testnet:[]},validator:o},{name:"MonaCoin",symbol:"mona",addressTypes:{prod:["32","37"],testnet:[]},validator:o},{name:"DigiByte",symbol:"dgb",addressTypes:{prod:["1e","3f"],testnet:[]},bech32Hrp:{prod:["dgb","S"],testnet:[]},validator:o},{name:"Tether",symbol:"usdt",addressTypes:{prod:["00","05"],testnet:["6f","c4"]},validator:v},{name:"Ripple",symbol:"xrp",validator:n},{name:"Dash",symbol:"dash",addressTypes:{prod:["4c","10"],testnet:["8c","13"]},validator:o},{name:"Neo",symbol:"neo",addressTypes:{prod:["17"],testnet:[]},validator:o},{name:"NeoGas",symbol:"gas",addressTypes:{prod:["17"],testnet:[]},validator:o},{name:"Qtum",symbol:"qtum",addressTypes:{prod:["3a","32"],testnet:["78","6e"]},validator:o},{name:"Waves",symbol:"waves",addressTypes:{prod:["0157"],testnet:["0154"]},expectedLength:26,hashFunction:"blake256keccak256",regex:/^[a-zA-Z0-9]{35}$/,validator:o},{name:"Ethereum",symbol:"eth",validator:i},{name:"EtherZero",symbol:"etz",validator:i},{name:"EthereumClassic",symbol:"etc",validator:i},{name:"Callisto",symbol:"clo",validator:i},{name:"Bankex",symbol:"bkx",validator:i},{name:"Cardano",symbol:"ada",bech32Hrp:{prod:["addr"],testnet:["addr"]},validator:s},{name:"Monero",symbol:"xmr",addressTypes:{prod:["18","42"],testnet:["53","63"],stagenet:["24"]},iAddressTypes:{prod:["19"],testnet:["54"],stagenet:["25"]},validator:a},{name:"Aragon",symbol:"ant",validator:i},{name:"Basic Attention Token",symbol:"bat",validator:i},{name:"Bancor",symbol:"bnt",validator:i},{name:"Civic",symbol:"cvc",validator:i},{name:"District0x",symbol:"dnt",validator:i},{name:"Gnosis",symbol:"gno",validator:i},{name:"Golem (GNT)",symbol:"gnt",validator:i},{name:"Golem",symbol:"glm",validator:i},{name:"Matchpool",symbol:"gup",validator:i},{name:"Melon",symbol:"mln",validator:i},{name:"Numeraire",symbol:"nmr",validator:i},{name:"OmiseGO",symbol:"omg",validator:i},{name:"TenX",symbol:"pay",validator:i},{name:"Ripio Credit Network",symbol:"rcn",validator:i},{name:"Augur",symbol:"rep",validator:i},{name:"iExec RLC",symbol:"rlc",validator:i},{name:"Salt",symbol:"salt",validator:i},{name:"Status",symbol:"snt",validator:i},{name:"Storj",symbol:"storj",validator:i},{name:"Swarm City",symbol:"swt",validator:i},{name:"TrueUSD",symbol:"tusd",validator:i},{name:"Wings",symbol:"wings",validator:i},{name:"0x",symbol:"zrx",validator:i},{name:"Expanse",symbol:"exp",validator:i},{name:"Viberate",symbol:"vib",validator:i},{name:"Odyssey",symbol:"ocn",validator:i},{name:"Polymath",symbol:"poly",validator:i},{name:"Storm",symbol:"storm",validator:i},{name:"Nano",symbol:"nano",validator:u},{name:"RaiBlocks",symbol:"xrb",validator:u},{name:"Siacoin",symbol:"sc",validator:f},{name:"HyperSpace",symbol:"xsc",validator:f},{name:"loki",symbol:"loki",addressTypes:{prod:["114","115","116"],testnet:[]},iAddressTypes:{prod:["115"],testnet:[]},validator:a},{name:"LBRY Credits",symbol:"lbc",addressTypes:{prod:["55"],testnet:[]},validator:o},{name:"Tron",symbol:"trx",addressTypes:{prod:[65],testnet:[160]},validator:h},{name:"Nem",symbol:"xem",validator:c},{name:"Lisk",symbol:"lsk",validator:l},{name:"Stellar",symbol:"xlm",validator:d},{name:"BTU Protocol",symbol:"btu",validator:i},{name:"Crypto.com Coin",symbol:"cro",bech32Hrp:{prod:["cro"],testnet:["tcro"]},validator:r(3961)},{name:"Multi-collateral DAI",symbol:"dai",validator:i},{name:"Enjin Coin",symbol:"enj",validator:i},{name:"HedgeTrade",symbol:"hedg",validator:i},{name:"Cred",symbol:"lba",validator:i},{name:"Chainlink",symbol:"link",validator:i},{name:"Loom Network",symbol:"loom",validator:i},{name:"Maker",symbol:"mkr",validator:i},{name:"Metal",symbol:"mtl",validator:i},{name:"Ocean Protocol",symbol:"ocean",validator:i},{name:"Quant",symbol:"qnt",validator:i},{name:"Synthetix Network",symbol:"snx",validator:i},{name:"SOLVE",symbol:"solve",validator:i},{name:"Spendcoin",symbol:"spnd",validator:i},{name:"TEMCO",symbol:"temco",validator:i},{name:"EOS",symbol:"eos",validator:y},{name:"Tezos",symbol:"xtz",validator:g},{name:"VeChain",symbol:"vet",validator:i},{name:"StormX",symbol:"stmx",validator:i},{name:"AugurV2",symbol:"repv2",validator:i},{name:"FirmaChain",symbol:"fct",validator:i},{name:"BlockTrade",symbol:"btt",validator:i},{name:"Quantum Resistant Ledger",symbol:"qrl",validator:i},{name:"Serve",symbol:"serv",validator:i},{name:"Tap",symbol:"xtp",validator:i},{name:"Compound",symbol:"comp",validator:i},{name:"Paxos",symbol:"pax",validator:i},{name:"USD Coin",symbol:"usdc",validator:i},{name:"CUSD",symbol:"cusd",validator:i},{name:"Algorand",symbol:"algo",validator:b},{name:"Polkadot",symbol:"dot",validator:w},{name:"Uniswap Coin",symbol:"uni",validator:i},{name:"Aave Coin",symbol:"aave",validator:i},{name:"Matic",symbol:"matic",validator:i},{name:"Decentraland",symbol:"mana",validator:i},{name:"Solana",symbol:"sol",validator:r(6072),maxLength:44,minLength:43},{name:"Binance",symbol:"bnb",validator:i},{name:"Avalanche",symbol:"avax",validator:i}];t.exports={getByNameOrSymbol:function(t){var e=t.toLowerCase();return m.find((function(t){return t.name.toLowerCase()===e||t.symbol.toLowerCase()===e}))},getAll:function(){return m}}},4292:(t,e,r)=>{const n=r(1661),i=[{addressLength:3,accountIndexLength:1,checkSumLength:1},{addressLength:4,accountIndexLength:2,checkSumLength:1},{addressLength:5,accountIndexLength:2,checkSumLength:2},{addressLength:6,accountIndexLength:4,checkSumLength:1},{addressLength:7,accountIndexLength:4,checkSumLength:2},{addressLength:8,accountIndexLength:4,checkSumLength:3},{addressLength:9,accountIndexLength:4,checkSumLength:4},{addressLength:10,accountIndexLength:8,checkSumLength:1},{addressLength:11,accountIndexLength:8,checkSumLength:2},{addressLength:12,accountIndexLength:8,checkSumLength:3},{addressLength:13,accountIndexLength:8,checkSumLength:4},{addressLength:14,accountIndexLength:8,checkSumLength:5},{addressLength:15,accountIndexLength:8,checkSumLength:6},{addressLength:16,accountIndexLength:8,checkSumLength:7},{addressLength:17,accountIndexLength:8,checkSumLength:8},{addressLength:34,accountIndexLength:32,checkSumLength:2}];t.exports={isValidAddress:function(t,e,r={}){const{networkType:n="prod"}=r;return this.verifyChecksum(t)},verifyChecksum:function(t){try{const e="53533538505245",r=n.base58(t),o=n.byteArray2hexStr(r.slice(0,1)),s=r.slice(1),a=i.find((t=>t.addressLength===s.length));if(!a)throw new Error("Invalid address length");const u=n.byteArray2hexStr(s.slice(0,a.accountIndexLength)),f=n.byteArray2hexStr(s.slice(-a.checkSumLength));return n.blake2b(e+o+u,64).substr(0,2*a.checkSumLength).toUpperCase()==f}catch(t){return!1}}}},4370:t=>{t.exports={isValidAddress:function(t,e,r){return function(t,e,r){return-1!==t.search(/^[a-z0-9.]+$/g)&&12===t.length}(t)}}},9947:(t,e,r)=>{var n=r(1661);t.exports={isValidAddress:function(t){return!!/^0x[0-9a-fA-F]{40}$/.test(t)&&(!(!/^0x[0-9a-f]{40}$/.test(t)&&!/^0x?[0-9A-F]{40}$/.test(t))||this.verifyChecksum(t))},verifyChecksum:function(t){t=t.replace("0x","");for(var e=n.keccak256(t.toLowerCase()),r=0;r<40;r++)if(parseInt(e[r],16)>7&&t[r].toUpperCase()!==t[r]||parseInt(e[r],16)<=7&&t[r].toLowerCase()!==t[r])return!1;return!0}}},2179:(t,e,r)=>{var n=r(8764).Buffer,i=r(1661),o=new RegExp("^[0-9]{1,20}L$");t.exports={isValidAddress:function(t){return!!o.test(t)&&this.verifyAddress(t)},verifyAddress:function(t){var e=t.substring(0,t.length-1),r=i.bigNumberToBuffer(e);return n.from(r).slice(0,8).equals(r)}}},9738:(t,e,r)=>{var n=r(1661),i=r(7041),o="prod",s=new RegExp("^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{95}$"),a=new RegExp("^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{106}$");t.exports={isValidAddress:function(t,e,r={}){const{networkType:u=o}=r;var f="standard";if(!s.test(t)){if(!a.test(t))return!1;f="integrated"}var h=i.decode(t);return!!h&&!!function(t,e,r,n){var i=e.addressTypes;"integrated"==n&&(i=e.iAddressTypes);var o=parseInt(t.substr(0,2),16).toString();switch(r){case"prod":return i.prod.indexOf(o)>=0;case"testnet":return i.testnet.indexOf(o)>=0;case"stagenet":return i.stagenet.indexOf(o)>=0;case"both":return i.prod.indexOf(o)>=0||i.testnet.indexOf(o)>=0||i.stagenet.indexOf(o)>=0;default:return!1}}(h,e,u,f)&&h.slice(-8)===n.keccak256Checksum(function(t){if(t.length%2!=0)return null;for(var e=new Uint8Array(t.length/2),r=0;r<t.length/2;++r)e[r]=parseInt(t.slice(2*r,2*r+2),16);return e}(h.slice(0,-8)))}}},6937:(t,e,r)=>{var n=r(1661),i="13456789abcdefghijkmnopqrstuwxyz",o=r(8162)(i),s=new RegExp("^(xrb|nano)_(["+i+"]{60})$");t.exports={isValidAddress:function(t){return!!s.test(t)&&this.verifyChecksum(t)},verifyChecksum:function(t){var e=o.decode(s.exec(t)[2]).slice(-37);return n.blake2b(n.toHex(e.slice(0,-5)),5)===n.toHex(e.slice(-5).reverse())}}},7409:(t,e,r)=>{var n=r(8764).Buffer,i=r(1661);t.exports={isValidAddress:function(t){var e=t.toString().toUpperCase().replace(/-/g,"");if(!e||40!==e.length)return!1;var r=i.toHex(i.base32.b32decode(e));return i.keccak256Checksum(n.from(r.slice(0,42),"hex"))===r.slice(42)}}},1686:(t,e,r)=>{var n=r(1661),i="rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz",o=r(8162)(i),s=new RegExp("^r["+i+"]{27,35}$");t.exports={isValidAddress:function(t){return!!s.test(t)&&this.verifyChecksum(t)},verifyChecksum:function(t){var e=o.decode(t);return n.sha256Checksum(n.toHex(e.slice(0,-4)))===n.toHex(e.slice(-4))}}},2548:(t,e,r)=>{var n=r(1661),i=r(2307);t.exports={isValidAddress:function(t){return 76===t.length&&this.verifyChecksum(t)},verifyChecksum:function(t){var e=t.slice(0,64),r=t.slice(64,76),o=n.blake2b(e,32).slice(0,12);return!!i(o,r)}}},7201:(t,e,r)=>{var n=r(8162),i=r(5057),o=r(1661),s="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",a=n(s),u=new RegExp("^["+s+"]{56}$");t.exports={isValidAddress:function(t){return!!u.test(t)&&this.verifyChecksum(t)},verifyChecksum:function(t){var e,r=a.decode(t);return 48===r[0]&&o.numberToHex((255&(e=i.crc16xmodem(r.slice(0,-2))))<<8|e>>8&255,4)===o.toHex(r.slice(-2))}}},1935:(t,e,r)=>{const n=r(3028),i=r(1661),o=new Uint8Array([6,161,159]);t.exports={isValidAddress:function(t){try{let e=function(t){let e=t.slice(0,-4),r=t.slice(-4),n=i.hexStr2byteArray(i.sha256x2(i.byteArray2hexStr(e)));if(!(r[0]^n[0]|r[1]^n[1]|r[2]^n[2]|r[3]^n[3]))return e}(n.decode(t));return!!e&&(e.slice(o.length),!0)}catch(t){return!1}}}},4740:(t,e,r)=>{var n=r(1661);t.exports={isValidAddress:function(t,e,r){var i=r?r.networkType:"",o=function(t){if("string"!=typeof t)return!1;if(t.length<=4)return!1;try{var e=n.base58(t)}catch(t){return!1}var r=e.length-4,i=e.slice(r);e=e.slice(0,r);var o=n.sha256(n.byteArray2hexStr(e)),s=n.hexStr2byteArray(n.sha256(o)).slice(0,4);return i[0]===s[0]&&i[1]===s[1]&&i[2]===s[2]&&i[3]===s[3]&&e}(t);return!!o&&21===o.length&&function(t,e){var r=e||"prod";return"prod"!==r&&"testnet"!==r&&(r="prod"),t.addressTypes[r][0]}(e,i)===o[0]}}},3585:(t,e,r)=>{var n=r(207),i=r(9947);t.exports={isValidAddress:function(t,e,r){if(r){if("erc20"===r.chainType)return i.isValidAddress(t,e,r.networkType);if("omni"===r.chainType)return n.isValidAddress(t,e,r.networkType)}return function(t,e,r){return n.isValidAddress(t,e,r)||i.isValidAddress(t,e,r)}(t,e,r)}}},4423:(t,e,r)=>{var n=r(3444);t.exports={validate:function(t,e,r){var i=n.getByNameOrSymbol(e||"bitcoin");if(i&&i.validator)return r&&"string"==typeof r?i.validator.isValidAddress(t,i,{networkType:r}):i.validator.isValidAddress(t,i,r);throw new Error("Missing validator for currency: "+e)},getCurrencies:function(){return n.getAll()},findCurrency:function(t){return n.getByNameOrSymbol(t)||null}}},4155:t=>{var e,r,n=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(r){try{return e.call(null,t,0)}catch(r){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(t){r=o}}();var a,u=[],f=!1,h=-1;function c(){f&&a&&(f=!1,a.length?u=a.concat(u):h=-1,u.length&&l())}function l(){if(!f){var t=s(c);f=!0;for(var e=u.length;e;){for(a=u,u=[];++h<e;)a&&a[h].run();h=-1,e=u.length}a=null,f=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function d(){}n.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];u.push(new p(t,e)),1!==u.length||f||s(l)},p.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=d,n.addListener=d,n.once=d,n.off=d,n.removeListener=d,n.removeAllListeners=d,n.emit=d,n.prependListener=d,n.prependOnceListener=d,n.listeners=function(t){return[]},n.binding=function(t){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(t){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},9509:(t,e,r)=>{var n=r(8764),i=n.Buffer;function o(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=n:(o(n,e),e.Buffer=s),s.prototype=Object.create(i.prototype),o(i,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},8979:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.validate=e.isValidData=void 0;var n=r(5449);e.isValidData=function(t,e,r){i.registerNotNull(t,e,r)},e.validate=function(t,e,r){var n=r.value;r.value=function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];var s=i.performValidation(t,e,r);if("object"==typeof s)throw new Error(JSON.stringify(s));var a=n.apply(this,r);return a}};var i=function(){function t(){}return t.registerNotNull=function(t,e,r){var n=this.notNullValidatorMap.get(t);n||(n=new Map,this.notNullValidatorMap.set(t,n));var i=n.get(e);i||(i=[],n.set(e,i)),i.push(r)},t.performValidation=function(t,e,r){var i=this.notNullValidatorMap.get(t);if(!i)return!0;if(!i.get(e))return!0;if(null==r?void 0:r[0]){var o=new n.OnramperValidator;o.validateAll(r[0]);var s=o.getErrorMessages();if(0!==Object.keys(s).length)return s}return!0},t.notNullValidatorMap=new Map,t}()},5449:function(t,e,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},n.apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&i(e,t,r);return o(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.OnramperValidator=e.ValidationStatus=e.Gateway=void 0;var a,u,f=r(3904),h=s(r(1382));(u=e.Gateway||(e.Gateway={})).Default="DEFAULT",u.Moonpay="MOONPAY",u.Wyre="WYRE",function(t){t[t.VALID=0]="VALID",t[t.INVALID=1]="INVALID",t[t.NOT_AVAILABLE=2]="NOT_AVAILABLE"}(a=e.ValidationStatus||(e.ValidationStatus={}));var c=function(){function t(t){var e=this;this.showMessageFor=function(t){e.visibleFields.includes(t)||e.visibleFields.push(t)},this.hideMessageFor=function(t){var r=e.visibleFields.indexOf(t);r>-1&&e.visibleFields.splice(r,1)},this.fields={},this.errorMessages={},this.rules=f.rules,this.visibleFields=[],this.className=null==t?void 0:t.className,this.messagesShown=!1,this.element=function(t){return t}}return t.prototype.getErrorMessages=function(){return this.errorMessages},t.prototype.purgeFields=function(){this.fields={},this.errorMessages={}},t.prototype.showMessages=function(){this.messagesShown=!0},t.prototype.hideMessages=function(){this.messagesShown=!1},t.prototype.allValid=function(){for(var t in this.fields)if(!1===this.fieldValid(t))return!1;return!0},t.prototype.fieldValid=function(t){return this.visibleFields.includes(t)&&this.fields.hasOwnProperty(t)&&!0===this.fields[t]},t.prototype.message=function(t,e,r){var i,o=r?n(n({},this.rules.DEFAULT),this.rules[r]):this.rules.DEFAULT;if(this.fields[t]=!0,o&&this.checkValidity(t,e,o)===a.INVALID)return i=this.element(h.modifyMessage(t,o[t].message)),this.fields[t]=!1,this.messagesShown||this.visibleFields.includes(t)?i:void 0},t.prototype.validateAll=function(t,e){for(var r=e?n(n({},this.rules.DEFAULT),this.rules[e]):this.rules.DEFAULT,i=0,o=Object.entries(t);i<o.length;i++){var s=o[i],u=s[0],f=s[1],c=void 0;this.checkValidity(u,f,r)===a.INVALID&&(c=this.element(h.modifyMessage(u,null==r?void 0:r[u].message)),this.errorMessages[u]=c)}},t.prototype.checkValidity=function(t,e,r){return(null==r?void 0:r.hasOwnProperty(t))?!h.isBlank(e)&&r[t].validate(e)?a.VALID:a.INVALID:a.NOT_AVAILABLE},t}();e.OnramperValidator=c},1382:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.isPastYear=e.validateWalletAddress=e.modifyMessage=e.humanizeFieldName=e.isBlank=e.testRegex=void 0;var i=n(r(4423));function o(t,e){return null!==(null==t?void 0:t.toString().match(e))}function s(t){return t.replace(/([A-Z])/g," $1").replace(/_/g," ").toLowerCase()}e.testRegex=o,e.isBlank=function(t){return null==t||o(t,/^[\s]*$/)},e.humanizeFieldName=s,e.modifyMessage=function(t,e){return e.replace(":attribute",s(t))},e.validateWalletAddress=function(t){var e=null==t?void 0:t.split(":"),r=e[0],n=e[1];return!(!r||!n)&&i.default.validate(n,r)},e.isPastYear=function(t){return t<(new Date).getFullYear().toString().substr(-2)}},3607:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),i(r(5449),e),i(r(8979),e)},2909:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&n(e,t,r);return i(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.defaultRules=void 0;var s=o(r(1382));e.defaultRules={required:{message:"The :attribute is required.",validate:function(t){return!s.isBlank(t)}},email:{message:"Please enter a valid email address.",validate:function(t){return s.testRegex(t,/^[A-Z0-9.!#$%&'*+-/=?^_`{|}~]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i)}},password:{message:"Password required.",validate:function(t){return!s.isBlank(t)}},firstName:{message:"Please enter a valid :attribute.",validate:function(t){return s.testRegex(t,/\b([A-ZÀ-ÿ][-,a-z. ']+[ ]*)+/)}},lastName:{message:"Please enter a valid :attribute.",validate:function(t){return s.testRegex(t,/\b([A-ZÀ-ÿ][-,a-z. ']+[ ]*)+/)}},verifyPhoneCode:{message:"Please enter a valid verification code.",validate:function(t){return s.testRegex(t,/^([0-9]{6})$/)}},verifyEmailCode:{message:"Please enter a valid verification code.",validate:function(t){return s.testRegex(t,/^([0-9]{6})$/)}},verifyCreditCard:{message:"Please enter a valid verification code.",validate:function(t){return s.testRegex(t,/^([0-9]{6})$/)}},cryptocurrencyAddress:{message:"Please enter a valid wallet address.",validate:function(t){return s.validateWalletAddress(t)}},currency:{message:"The :attribute must be a valid currency.",validate:function(t){return s.testRegex(t,/^[\$£€¥]?(\d{1,3})(\,?\d{3})*\.?\d{0,2}$/)}},street:{message:"Please enter a valid :attribute.",validate:function(t){return s.testRegex(t,/^[a-zA-Z0-9\s,'-]*$/)}},town:{message:"Please enter a valid :attribute.",validate:function(t){return s.testRegex(t,/^(?:[A-Za-z]{2,}(?:(\.\s|'s\s|\s?-\s?|\s)?(?=[A-Za-z]+))){1,2}(?:[A-Za-z]+)?$/)}},postCode:{message:"Please enter a valid :attribute.",validate:function(t){return s.testRegex(t,/^[A-Z0-9_-]*$/)}},phoneNumber:{message:"Please enter a valid :attribute.",validate:function(t){return s.testRegex(t,/^(\+?\d{0,4})?\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{4}\)?)$/)&&!s.testRegex(t,/^\b(\d)\1{8,}\b$/)}},ccNumber:{message:"Please enter a valid credit card number.",validate:function(t){return s.testRegex(t,/^\d{4}\s?\d{4,6}\s?\d{4,5}\s?\d{0,8}$/)}},ccMonth:{message:"Please enter a valid month.",validate:function(t){return s.testRegex(t,/^(0[1-9]|1[0-2])/)}},ccYear:{message:"Please enter a valid year.",validate:function(t){return s.testRegex(t,/^([0-9]{2})$/)&&!s.isPastYear(t)}},ccCVV:{message:"Please enter a valid cvv.",validate:function(t){return s.testRegex(t,/^([0-9]{3})$/)}}}},3904:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.rules=void 0;var n=r(2909),i=r(6725),o=r(8540);e.rules={DEFAULT:n.defaultRules,WYRE:o.wyreRules,MOONPAY:i.moonpayRules}},6725:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&n(e,t,r);return i(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.moonpayRules=void 0;var s=o(r(1382));e.moonpayRules={required:{message:"The :attribute field is required.",validate:function(t){return!s.isBlank(t)}},email:{message:"The :attribute must be a valid email address.- Moonpay",validate:function(t){return s.testRegex(t,/^[A-Z0-9.!#$%&'*+-/=?^_`{|}~]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i)}}}},8540:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&n(e,t,r);return i(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.wyreRules=void 0;var s=o(r(1382));e.wyreRules={required:{message:"The :attribute field is required.",validate:function(t){return!s.isBlank(t)}}}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.amdO={},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),r(3607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,